# The tag for the base image is: 10.1-cudnn7-devel-ubuntu16.04
FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu16.04

LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"

ARG PYTHON_VERSION=3.6.13
ARG OPEN_MPI_VERSION=4.0.1
ARG CUBLAS_VERSION=10.2.1.243-1_amd64
ARG OPEN_MPI_PATH=/home/.openmpi
ARG CUDA_HOME=/usr/local/cuda

# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating
# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.
ARG SMDEBUG_VERSION=0.9.3

# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for logging
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/opt/conda/lib:${LD_LIBRARY_PATH}"
ENV PYTHONIOENCODING=UTF-8
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH
ENV TORCH_CUDA_ARCH_LIST="3.5 5.2 6.0 6.1 7.0+PTX"
ENV TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
ENV HOROVOD_VERSION=0.19.5
ENV DGLBACKEND=pytorch
ENV CMAKE_PREFIX_PATH="$(dirname $(which conda))/../"
ENV SAGEMAKER_TRAINING_MODULE=sagemaker_pytorch_container.training:main

ARG PT_TRAINING_URL=https://aws-pytorch-binaries.s3-us-west-2.amazonaws.com/r1.6.0_aws/20200727-215603/a40b1c195ba679596118514fcbeae1f422591426/gpu/torch-1.6.0-cp36-cp36m-manylinux1_x86_64.whl

RUN apt-get update \
 && apt-get install -y  --allow-downgrades --allow-change-held-packages --no-install-recommends \
    build-essential \
    ca-certificates \
    cmake \
    cuda-command-line-tools-10-1 \
    cuda-cufft-10-1 \
    cuda-curand-10-1 \
    cuda-cusolver-10-1 \
    cuda-cusparse-10-1 \
    curl \
    emacs \
    git \
    jq \
    libboost-all-dev \
    libglib2.0-0 \
    libgl1-mesa-glx \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libibverbs-dev \
    libhwloc-dev \
    libnuma1 \
    libnuma-dev \
    vim \
    wget \
    zlib1g-dev \
 && apt-get remove -y cuda-cufft-dev-10-1 \
    cuda-cusolver-dev-10-1 \
    cuda-npp-dev-10-1 \
    cuda-nvgraph-dev-10-1 \
    cuda-nvjpeg-dev-10-1 \
    cuda-nvrtc-dev-10-1 \
 && rm -rf /var/lib/apt/lists/*

RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/libcublas10_${CUBLAS_VERSION}.deb \
 && dpkg -i libcublas10_${CUBLAS_VERSION}.deb \
 && apt-get install -f -y \
 && rm libcublas10_${CUBLAS_VERSION}.deb

# Upgrade NCCL from 2.4.8 to 2.7.8
RUN rm -rf  /usr/lib/x86_64-linux-gnu/libnccl* \
 && cd /tmp \
 && git clone https://github.com/NVIDIA/nccl.git -b v2.7.8-1 \
 && cd nccl \
 && make -j64 src.build BUILDDIR=/usr/local CUDA_HOME=${CUDA_HOME} NVCC_GENCODE="-gencode=arch=compute_70,code=sm_70" \
 && rm -rf /tmp/nccl

# Set the Env Paths to reflect new NCCL
ENV LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"

RUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \
 && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \
 && cd openmpi-$OPEN_MPI_VERSION \
 && ./configure --prefix=$OPEN_MPI_PATH \
 && make all install \
 && cd .. \
 && rm openmpi-$OPEN_MPI_VERSION.tar.gz \
 && rm -rf openmpi-$OPEN_MPI_VERSION

ENV PATH="$OPEN_MPI_PATH/bin:$PATH"
ENV LD_LIBRARY_PATH="$OPEN_MPI_PATH/lib/:$LD_LIBRARY_PATH"

RUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value \
 && curl -L -o ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
 && chmod +x ~/miniconda.sh \
 && ~/miniconda.sh -b -p /opt/conda \
 && rm ~/miniconda.sh \
 && /opt/conda/bin/conda install -c conda-forge \
    python=$PYTHON_VERSION \
 && /opt/conda/bin/conda install -y -c anaconda \
    numpy \
    ipython \
    mkl \
    mkl-include \
    cython \
    typing \
    future \
    "pyopenssl>=17.5.0" \
 && conda install -c dglteam -y dgl-cuda10.1==0.4.3 \
 && /opt/conda/bin/conda clean -ya

RUN conda install -c pytorch magma-cuda101==2.5.2 \
 && conda install -c conda-forge \
    opencv \
 && conda install -y scikit-learn \
    pandas \
    h5py \
    requests \
    libgcc \
 && conda clean -ya

WORKDIR /opt/pytorch

# Copy workaround script for incorrect hostname
COPY changehostname.c /
COPY start_with_right_hostname.sh /usr/local/bin/start_with_right_hostname.sh

WORKDIR /root

RUN /opt/conda/bin/conda config --set ssl_verify False \
 && pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org \
 && ln -s /opt/conda/bin/pip /usr/local/bin/pip3

# Uninstall torch and torchvision before installing the custom versions from an S3 bucket
RUN pip install \
    --no-cache-dir smdebug==${SMDEBUG_VERSION} \
    "sagemaker>=2,<3" \
    sagemaker-experiments==0.* \
    --no-cache-dir "sagemaker-pytorch-training<3" \
    --no-cache-dir fastai==1.0.59 \
    "awscli<2" \
    psutil \
    Pillow \
    scipy \
    click \
    ruamel-yaml \
    mpi4py==3.0.3 \
    cmake==3.18.2.post1 \
 && pip install --no-cache-dir -U ${PT_TRAINING_URL} \
 && pip uninstall -y torchvision \
 && pip install --no-deps --no-cache-dir -U \
     https://torchvision-build.s3.amazonaws.com/1.6.0/gpu/torchvision-0.7.0-cp36-cp36m-linux_x86_64.whl

# Install Horovod
RUN pip uninstall -y horovod \
 && ldconfig /usr/local/cuda-10.1/targets/x86_64-linux/lib/stubs \
 && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_CUDA_HOME=/usr/local/cuda-10.1 HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir horovod==${HOROVOD_VERSION} \
 && ldconfig

# Install Nvidia Apex
RUN git clone https://github.com/NVIDIA/apex.git \
 && cd apex \
 && pip install -v --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" ./

# Configure Open MPI and configure NCCL parameters
RUN mv $OPEN_MPI_PATH/bin/mpirun $OPEN_MPI_PATH/bin/mpirun.real \
 && echo '#!/bin/bash' > $OPEN_MPI_PATH/bin/mpirun \
 && echo 'mpirun.real --allow-run-as-root "$@"' >> $OPEN_MPI_PATH/bin/mpirun \
 && chmod a+x $OPEN_MPI_PATH/bin/mpirun \
 && echo "hwloc_base_binding_policy = none" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \
 && echo "rmaps_base_mapping_policy = slot" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \
 && echo "btl_tcp_if_exclude = lo,docker0" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \
 && echo NCCL_DEBUG=INFO >> /etc/nccl.conf \
 && echo NCCL_SOCKET_IFNAME=^docker0 >> /etc/nccl.conf

# Install OpenSSH for MPI to communicate between containers, allow OpenSSH to talk to containers without asking for confirmation
RUN apt-get update \
 && apt-get install -y  --allow-downgrades --allow-change-held-packages --no-install-recommends \
 && apt-get install -y --no-install-recommends openssh-client openssh-server \
 && mkdir -p /var/run/sshd \
 && cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \
 && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new \
 && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /

ADD https://raw.githubusercontent.com/aws/deep-learning-containers/master/src/deep_learning_container.py /usr/local/bin/deep_learning_container.py

RUN chmod +x /usr/local/bin/start_with_right_hostname.sh \
 && chmod +x /usr/local/bin/deep_learning_container.py \
 && wget -O /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.6.0/license.txt

# Starts framework
ENTRYPOINT ["bash", "-m", "start_with_right_hostname.sh"]
CMD ["/bin/bash"]
