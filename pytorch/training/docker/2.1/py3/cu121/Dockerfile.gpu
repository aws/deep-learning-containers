ARG PYTHON=python3
ARG PYTHON_VERSION=3.10.12
ARG PYTHON_SHORT_VERSION=3.10
ARG MAMBA_VERSION=23.3.1-1
ARG PYTORCH_VERSION_EC2=2.1.0
ARG CONDA_CHANNEL=https://aws-ml-conda-ec2.s3.us-west-2.amazonaws.com

FROM nvidia/cuda:12.1.0-base-ubuntu20.04 AS base_image

ENV DEBIAN_FRONTEND=noninteractive \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"

RUN apt-get update \
 && apt-get upgrade -y \
 && apt-get autoremove -y \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

FROM base_image AS common

LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"

ARG PYTHON
ARG PYTHON_VERSION
ARG PYTHON_SHORT_VERSION
ARG MAMBA_VERSION
ARG CONDA_CHANNEL
ARG EFA_PATH=/opt/amazon/efa

# This arg required to stop docker build waiting for region configuration while installing tz data from ubuntu 20
ARG DEBIAN_FRONTEND=noninteractive

# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for logging
ENV CUDA_HOME=/opt/conda
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/opt/conda/lib:${LD_LIBRARY_PATH}"
ENV PYTHONIOENCODING=UTF-8
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH
# older archs are not supported on CUDA12.1 like 3.7 for P2 instance
# 5.2 is G3 EC2 instance, 7.5 is G4*, 7.0 is p3*, 8.0 is P4*, 8.6 is G5* and 9.0 is P5*
ENV TORCH_CUDA_ARCH_LIST="5.2;7.0+PTX;7.5;8.0;8.6;9.0"
ENV TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
ENV CUDNN_VERSION=8.9.2.26
ENV NCCL_VERSION=2.18.5
ENV EFA_VERSION=1.27.0
ENV GDRCOPY_VERSION=2.3.1

ENV CMAKE_PREFIX_PATH="$(dirname $(which conda))/../"
ENV OPEN_MPI_PATH=/opt/amazon/openmpi

ENV DGLBACKEND=pytorch
ENV MANUAL_BUILD=0
ENV RDMAV_FORK_SAFE=1
ENV DLC_CONTAINER_TYPE=training

#Set NCCL_ASYNC_ERROR_HANDLING=1 for PyTorch to timeout on NCCL errors https://github.com/pytorch/elastic/issues/136
ENV NCCL_ASYNC_ERROR_HANDLING=1

RUN apt-get update \
 # TODO: Remove systemd upgrade once it is updated in base image
 && apt-get -y upgrade --only-upgrade systemd \
 && apt-get install -y --allow-change-held-packages --no-install-recommends \
    build-essential \
    ca-certificates \
    cmake \
    libcudnn8=$CUDNN_VERSION-1+cuda12.1 \
    libcudnn8-dev=$CUDNN_VERSION-1+cuda12.1 \
    curl \
    emacs \
    git \
    jq \
    libcurl4-openssl-dev \
    libglib2.0-0 \
    libgl1-mesa-glx \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libibverbs-dev \
    libnuma1 \
    libnuma-dev \
    libssl1.1 \
    libssl-dev \
    libtool \
    openssl \
    python3-dev \
    unzip \
    vim \
    wget \
    zlib1g-dev \
    autoconf \
    pkg-config \
    check \
    libsubunit0 \
    libsubunit-dev \
    # ninja is needed for apex to speed up the build
    ninja-build \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

# for conda ssl verification
ENV REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
RUN curl -L -o ~/mambaforge.sh https://github.com/conda-forge/miniforge/releases/download/${MAMBA_VERSION}/Mambaforge-${MAMBA_VERSION}-Linux-x86_64.sh \
 && chmod +x ~/mambaforge.sh \
 && ~/mambaforge.sh -b -p /opt/conda \
 && rm ~/mambaforge.sh

# Install common conda packages
RUN /opt/conda/bin/mamba install -y -c conda-forge \
    pyopenssl \
    requests \
    libgcc \
    pybind11 \
    cmake \
    python=$PYTHON_VERSION \
    cython \
    mkl \
    mkl-include \
    parso \
    typing \
    charset-normalizer \
    packaging \
    awscli \
    boto3 \
    pyyaml \
    scipy \
    click \
    psutil \
    ipython \
    # Adding package for studio kernels
    ipykernel \
    # patch CVE
    "cryptography>=41.0.4" \
    # patch CVE
    "urllib3>=1.26.18,<2" \
    pillow \
    "mpi4py>=3.1.4,<3.2" \
    h5py \
  && /opt/conda/bin/mamba clean -afy \
  && rm -rf /etc/apt/sources.list.d/*

# For EFA, below flags are needed to install EFA on docker image
#  -n, --no-verify	Skip EFA device verification and test
#  -l, --skip-limit-conf	Skip EFA limit configuration
#  -k, --skip-kmod	Skip EFA kmod installation
RUN mkdir /tmp/efa \
 && cd /tmp/efa \
 && curl -O https://s3-us-west-2.amazonaws.com/aws-efa-installer/aws-efa-installer-${EFA_VERSION}.tar.gz \
 && tar -xf aws-efa-installer-${EFA_VERSION}.tar.gz \
 && cd aws-efa-installer \
 && apt-get update \
 && ./efa_installer.sh -y --skip-kmod --skip-limit-conf --no-verify \
 && rm -rf /tmp/efa \
 && rm -rf /tmp/aws-efa-installer-${EFA_VERSION}.tar.gz \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

ENV PATH="$OPEN_MPI_PATH/bin:$EFA_PATH/bin:$PATH"
ENV LD_LIBRARY_PATH=$OPEN_MPI_PATH/lib/:$EFA_PATH/lib/:$LD_LIBRARY_PATH

RUN pip install --no-cache-dir --upgrade pip --no-cache-dir --trusted-host pypi.org --trusted-host files.pythonhosted.org \
 && ln -s /opt/conda/bin/pip /usr/local/bin/pip3

WORKDIR /root

# Configure Open MPI and configure NCCL parameters
RUN mv $OPEN_MPI_PATH/bin/mpirun $OPEN_MPI_PATH/bin/mpirun.real \
 && echo '#!/bin/bash' > $OPEN_MPI_PATH/bin/mpirun \
 && echo "${OPEN_MPI_PATH}/bin/mpirun.real --allow-run-as-root \"\$@\"" >> $OPEN_MPI_PATH/bin/mpirun \
 && chmod a+x $OPEN_MPI_PATH/bin/mpirun \
 && echo "hwloc_base_binding_policy = none" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \
 && echo "rmaps_base_mapping_policy = slot" >> $OPEN_MPI_PATH/etc/openmpi-mca-params.conf \
 && echo NCCL_DEBUG=INFO >> /etc/nccl.conf \
 && echo NCCL_SOCKET_IFNAME=^docker0 >> /etc/nccl.conf

# Install OpenSSH for MPI to communicate between containers, allow OpenSSH to talk to containers without asking for confirmation
RUN apt-get update \
 && apt-get install -y  --allow-downgrades --allow-change-held-packages --no-install-recommends \
 && apt-get install -y --no-install-recommends openssh-client openssh-server \
 && mkdir -p /var/run/sshd \
 && cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \
 && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new \
 && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

# Configure OpenSSH so that nodes can communicate with each other
RUN mkdir -p /var/run/sshd && \
 sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

RUN rm -rf /root/.ssh/ && \
 mkdir -p /root/.ssh/ && \
 ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \
 cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \
 && printf "Host *\n StrictHostKeyChecking no\n" >> /root/.ssh/config

RUN mkdir -p /etc/pki/tls/certs && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt

RUN curl -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-2.1/license.txt

# Removing the cache as it is needed for security verification
RUN rm -rf /root/.cache | true

########################################################
#  _____ ____ ____    ___
# | ____/ ___|___ \  |_ _|_ __ ___   __ _  __ _  ___
# |  _|| |     __) |  | || '_ ` _ \ / _` |/ _` |/ _ \
# | |__| |___ / __/   | || | | | | | (_| | (_| |  __/
# |_____\____|_____| |___|_| |_| |_|\__,_|\__, |\___|
#                                         |___/
#  ____           _
# |  _ \ ___  ___(_)_ __   ___
# | |_) / _ \/ __| | '_ \ / _ \
# |  _ <  __/ (__| | |_) |  __/
# |_| \_\___|\___|_| .__/ \___|
#                  |_|
########################################################

FROM common AS ec2

ARG PYTHON
ARG PYTHON_VERSION
ARG PYTHON_SHORT_VERSION
ARG PYTORCH_VERSION_EC2
ARG CONDA_CHANNEL
ARG CUDA_HOME
ARG TORCH_CUDA_ARCH_LIST
ARG NCCL_ASYNC_ERROR_HANDLING

WORKDIR /

# Install ec2 PyTorch
RUN /opt/conda/bin/mamba install -y python=${PYTHON_SHORT_VERSION} pytorch=${PYTORCH_VERSION_EC2} \
  pytorch-cuda=12.1 cuda-nvcc=12.1.* torchvision torchaudio torchtext aws-ofi-nccl-dlc \
  --override-channels \
  -c ${CONDA_CHANNEL} \
  -c nvidia \
  -c conda-forge \
  && /opt/conda/bin/mamba clean -afy

# CUDA libraries should be installed as a separate installation command to reduce memory size of single layer.
# If single layer is huge in size (like 17 GB), then ECR pull can timeout on smaller EC2 instances like P3.2x.
# Have added python and pytorch again in below command to make sure pytorch version wont be changed.
RUN /opt/conda/bin/mamba install -y python=${PYTHON_SHORT_VERSION} pytorch=${PYTORCH_VERSION_EC2} \
  cuda-libraries-dev=12.1 cuda-libraries-static=12.1 cuda-compiler=12.1 \
  --override-channels \
  -c ${CONDA_CHANNEL} \
  -c nvidia \
  -c conda-forge \
  && /opt/conda/bin/mamba clean -afy

# Install NCCL
RUN cd /tmp \
 && git clone https://github.com/NVIDIA/nccl.git -b v${NCCL_VERSION}-1 \
 && cd nccl \
 && make -j64 src.build BUILDDIR=/usr/local CUDA_LIB=${CUDA_HOME}/lib \
 && rm -rf /tmp/nccl

# install PyTorch related python packages (depends on PyTorch)
RUN /opt/conda/bin/mamba install -y -c conda-forge \
  # needed by fastai.distributed
  # pin accelerate to 0.22.0 as newer version gives error "0.23.0 requires huggingface-hub, which is not installed."
  "accelerate=0.22.0" \
  && /opt/conda/bin/mamba install -y -c fastai fastai \
  # fastai conda strictly depends on dataclasses
  && pip uninstall -y dataclasses \
  && pip install torchtnt \
  && /opt/conda/bin/mamba clean -afy

# Patches
RUN pip install pillow opencv-python
RUN /opt/conda/bin/mamba install -y -c conda-forge \
  "requests>=2.31.0" \
  && /opt/conda/bin/mamba clean -afy

# Install GDRCopy which is a dependency of SM Distributed DataParallel binary
# The test binaries requires cuda driver library which could be found in conda
# So update the linker path to point to it to avoid -Lcuda not found
RUN cd /tmp \
 && git clone https://github.com/NVIDIA/gdrcopy.git -b v${GDRCOPY_VERSION} \
 && cd gdrcopy \
 && sed -ie '12s@$@ -L $(CUDA)/lib/stubs@' tests/Makefile \
 && CUDA=${CUDA_HOME} make install \
 && rm -rf /tmp/gdrcopy

# Install Nvidia Apex (needs pytorch)
RUN pip install packaging \
  && git clone https://github.com/NVIDIA/apex \
  && cd apex \
  && git checkout 23.08 -b apex \
  && pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings "--build-option=--cpp_ext" --config-settings "--build-option=--cuda_ext" ./ \
  && cd .. \
  && rm -rf apex

# Install flash attn and NVIDIA transformer engine.
# Optionally set NVTE_FRAMEWORK to avoid bringing in additional frameworks during TE install
ENV NVTE_FRAMEWORK=pytorch
# Install flash-attn using instructions from https://github.com/Dao-AILab/flash-attention#installation-and-features
# Set MAX_JOBS=4 to avoid OOM issues in installation process
RUN MAX_JOBS=4 pip install flash-attn==2.0.4 --no-build-isolation
# Install TE using instructions from https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/installation.html
RUN pip install git+https://github.com/NVIDIA/TransformerEngine.git@release_v0.12

RUN HOME_DIR=/root \
 && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
 && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
 && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
 && chmod +x /usr/local/bin/testOSSCompliance \
 && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
 && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
 && rm -rf ${HOME_DIR}/oss_compliance* \
 && rm -rf /tmp/tmp*

# Removing the cache as it is needed for security verification
RUN rm -rf /root/.cache | true

# Starts framework
CMD ["/bin/bash"]

#################################################################
#  ____                   __  __       _
# / ___|  __ _  __ _  ___|  \/  | __ _| | _____ _ __
# \___ \ / _` |/ _` |/ _ \ |\/| |/ _` | |/ / _ \ '__|
#  ___) | (_| | (_| |  __/ |  | | (_| |   <  __/ |
# |____/ \__,_|\__, |\___|_|  |_|\__,_|_|\_\___|_|
#              |___/
#  ___                              ____           _
# |_ _|_ __ ___   __ _  __ _  ___  |  _ \ ___  ___(_)_ __   ___
#  | || '_ ` _ \ / _` |/ _` |/ _ \ | |_) / _ \/ __| | '_ \ / _ \
#  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/
# |___|_| |_| |_|\__,_|\__, |\___| |_| \_\___|\___|_| .__/ \___|
#                      |___/                        |_|
#################################################################

FROM common AS sagemaker

LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"

ENV SAGEMAKER_TRAINING_MODULE=sagemaker_pytorch_container.training:main

# PyTorch Binaries
ARG PYTHON
ARG PYTHON_VERSION
ARG PYTHON_SHORT_VERSION
ARG PYTORCH_VERSION_SM
ARG CONDA_CHANNEL
ARG CUDA_HOME
ARG TORCH_CUDA_ARCH_LIST
ARG NCCL_ASYNC_ERROR_HANDLING

WORKDIR /

# Install sm PyTorch
RUN /opt/conda/bin/mamba install -y python=${PYTHON_SHORT_VERSION} pytorch=${PYTORCH_VERSION_SM} \
  pytorch-cuda=12.1 cuda-nvcc=12.1.* torchvision torchaudio torchtext aws-ofi-nccl-dlc \
  --override-channels \
  -c ${CONDA_CHANNEL} \
  -c nvidia \
  -c conda-forge \
  && /opt/conda/bin/mamba clean -afy

# CUDA libraries should be installed after pytorch installation command to reduce memory size of single layer.
# If single layer is huge in size (like 17 GB), then ECR pull can timeout on smaller EC2 instances like P3.2x.
# Have added python and pytorch again in below command to make sure pytorch version wont be changed.
RUN /opt/conda/bin/mamba install -y python=${PYTHON_SHORT_VERSION} pytorch=${PYTORCH_VERSION_SM} \
  cuda-libraries-dev=12.1 cuda-libraries-static=12.1 cuda-compiler=12.1 \
  --override-channels \
  -c ${CONDA_CHANNEL} \
  -c nvidia \
  -c conda-forge \
  && /opt/conda/bin/mamba clean -afy

# Install NCCL
RUN cd /tmp \
 && git clone https://github.com/NVIDIA/nccl.git -b v${NCCL_VERSION}-1 \
 && cd nccl \
 && make -j64 src.build BUILDDIR=/usr/local CUDA_LIB=${CUDA_HOME}/lib \
 && rm -rf /tmp/nccl

# install PyTorch related python packages (depends on PyTorch)
RUN /opt/conda/bin/mamba install -y -c conda-forge \
  # needed by fastai.distributed
  # pin accelerate to 0.22.0 as newer version gives error "0.23.0 requires huggingface-hub, which is not installed."
  "accelerate=0.22.0" \
  && /opt/conda/bin/mamba install -y -c fastai fastai \
  # fastai conda strictly depends on dataclasses
  && pip uninstall -y dataclasses \
  && pip install torchnet \
  && /opt/conda/bin/mamba clean -afy

# Patches
RUN pip install pillow opencv-python
RUN /opt/conda/bin/mamba install -y -c conda-forge \
  "requests>=2.31.0" \
  && /opt/conda/bin/mamba clean -afy

# Install GDRCopy which is a dependency of SM Distributed DataParallel binary
# The test binaries requires cuda driver library which could be found in conda
# So update the linker path to point to it to avoid -Lcuda not found
# Note that starting with 11.8, cuda relate lib are moved to conda instead /usr/local/cuda
RUN cd /tmp \
 && git clone https://github.com/NVIDIA/gdrcopy.git -b v${GDRCOPY_VERSION} \
 && cd gdrcopy \
 && sed -ie '12s@$@ -L $(CUDA)/lib/stubs@' tests/Makefile \
 && CUDA=/opt/conda make install \
 && rm -rf /tmp/gdrcopy

# Install Nvidia Apex (needs pytorch)
RUN pip install packaging \
  && git clone https://github.com/NVIDIA/apex \
  && cd apex \
  && git checkout 23.08 -b apex \
  && pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings "--build-option=--cpp_ext" --config-settings "--build-option=--cuda_ext" ./ \
  && cd .. \
  && rm -rf apex

# Install flash attn and NVIDIA transformer engine.
# Optionally set NVTE_FRAMEWORK to avoid bringing in additional frameworks during TE install
ENV NVTE_FRAMEWORK=pytorch
# Install flash-attn using instructions from https://github.com/Dao-AILab/flash-attention#installation-and-features
# Set MAX_JOBS=4 to avoid OOM issues in installation process
RUN MAX_JOBS=4 pip install flash-attn==2.0.4 --no-build-isolation
# Install TE using instructions from https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/installation.html
RUN pip install git+https://github.com/NVIDIA/TransformerEngine.git@release_v0.12

# Copy workaround script for incorrect hostname
COPY changehostname.c /
COPY start_with_right_hostname.sh /usr/local/bin/start_with_right_hostname.sh

RUN chmod +x /usr/local/bin/start_with_right_hostname.sh

WORKDIR /root

# install SM packages
RUN pip install --no-cache-dir -U \
    smclarify \
    "sagemaker>=2,<3" \
    "sagemaker-experiments<1" \
    sagemaker-pytorch-training \
    sagemaker-training \
    # as sagemaker toolkit package has pinned botocore as per commit https://github.com/aws/sagemaker-training-toolkit/pull/201/files#diff-60f61ab7a8d1910d86d9fda2261620314edcae5894d5aaa236b821c7256badd7R46
    # adding this here explicitly to resolve pip check errors
    awscli \
    boto3

# Install extra packages
RUN /opt/conda/bin/mamba install -y -c conda-forge \
  bokeh \
  imageio \
  numba \
  pandas \
  plotly \
  shap \
  scikit-learn \
  seaborn \
 && /opt/conda/bin/mamba clean -afy

WORKDIR /

RUN HOME_DIR=/root \
 && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
 && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
 && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
 && chmod +x /usr/local/bin/testOSSCompliance \
 && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
 && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
 && rm -rf ${HOME_DIR}/oss_compliance* \
 && rm -rf /tmp/tmp*

# Removing the cache as it is needed for security verification
RUN rm -rf /root/.cache | true

ENTRYPOINT ["bash", "-m", "start_with_right_hostname.sh"]
CMD ["/bin/bash"]
