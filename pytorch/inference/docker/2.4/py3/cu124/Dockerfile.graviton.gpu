ARG PYTHON=python3
ARG PYTHON_VERSION=3.11.9
ARG MAMBA_VERSION=23.11.0-0
ARG OPEN_MPI_VERSION=4.1.5

# Nvidia software versions
ARG CUBLAS_VERSION=12.4.5.8
ARG CUDNN_VERSION=9.1.0.70
ARG NCCL_VERSION=2.20.5
ARG NVML_VERSION=12.4.99

# PyTorch Graviton Binaries
ARG TORCH_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/pytorch/v2.4.0/arm64/cu124/torch-2.4.0%2Bcu124-cp311-cp311-linux_aarch64.whl
ARG TORCHVISION_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/pytorch/v2.4.0/arm64/cu124/torchvision-0.19.0%2Bcu124-cp311-cp311-linux_aarch64.whl
ARG TORCHAUDIO_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/pytorch/v2.4.0/arm64/cu124/torchaudio-2.4.0%2Bcu124-cp311-cp311-linux_aarch64.whl
ARG TORCHTEXT_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/pytorch/v2.4.0/arm64/cu124/torchtext-0.18.0%2Bcu124-cp311-cp311-linux_aarch64.whl
ARG TORCHSERVE_VERSION
ARG SM_TOOLKIT_VERSION

########################################################
#  _____ ____ ____    ___
# | ____/ ___|___ \  |_ _|_ __ ___   __ _  __ _  ___
# |  _|| |     __) |  | || '_ ` _ \ / _` |/ _` |/ _ \
# | |__| |___ / __/   | || | | | | | (_| | (_| |  __/
# |_____\____|_____| |___|_| |_| |_|\__,_|\__, |\___|
#                                         |___/
#  ____           _
# |  _ \ ___  ___(_)_ __   ___
# | |_) / _ \/ __| | '_ \ / _ \
# |  _ <  __/ (__| | |_) |  __/
# |_| \_\___|\___|_| .__/ \___|
#                  |_|
########################################################
FROM --platform=linux/arm64 nvidia/cuda:12.4.0-base-ubuntu22.04 AS ec2

LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"

ARG PYTHON
ARG PYTHON_VERSION
ARG OPEN_MPI_VERSION
ARG MAMBA_VERSION

# Nvidia passed Arguments
ARG CUBLAS_VERSION
ARG CUDNN_VERSION
ARG NVML_VERSION
ARG NCCL_VERSION

# PyTorch Passed arguments (URLs and Versions)
ARG TORCH_URL
ARG TORCHVISION_URL
ARG TORCHAUDIO_URL
ARG TORCHTEXT_URL
ARG TORCHSERVE_VERSION

# Common ENV Variables
ENV DEBIAN_FRONTEND=noninteractive \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib" \
    LANG=C.UTF-8 \
    LD_LIBRARY_PATH=/opt/conda/lib/:$LD_LIBRARY_PATH \
    PATH=/opt/conda/bin:$PATH \
    TEMP=/tmp \
    # Graviton Optimization ENV Variables
    LRU_CACHE_CAPACITY=1024 \
    THP_MEM_ALLOC_ENABLE=1 \
    DNNL_DEFAULT_FPMATH_MODE=BF16

## Cuda Arch List setting Options
# Kepler+Tesla = 3.7 (P2 Instances "No Longer Supported")
# Kepler = 3.5+PTX
# Maxwell+Tegra = 5.3
# Maxwell = 5.0;5.2+PTX (G3 Instances)
# Pascal = 6.0;6.1+PTX
# Volta = 7.0+PTX (P3 Instances)
# Turing = 7.5+PTX (G4 Instances)
# Ampere = 8.0;8.6+PTX (P4 and G5 Instances)
# Ada = 8.9+PTX
# Hopper = 9.0 (P5 Instances)
ENV TORCH_CUDA_ARCH_LIST="5.0 7.0+PTX 7.5+PTX 8.0 8.6 9.0"

RUN apt-get update \
 && apt-get -y upgrade \
 && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    cmake \
    cuda-cudart-12-4 \
    cuda-cudart-dev-12-4 \
    cuda-libraries-12-4 \
    cuda-libraries-dev-12-4 \
    cuda-command-line-tools-12-4 \
    cuda-nvcc-12-4 \
    libcublas-12-4=${CUBLAS_VERSION}-1 \
    libcublas-dev-12-4=${CUBLAS_VERSION}-1 \
    cuda-nvml-dev-12-4=${NVML_VERSION}-1 \
    libcudnn9-cuda-12=${CUDNN_VERSION}-1 \
    curl \
    emacs \
    # adding GCC 11 for graviton compile support
    gfortran-11 \
    g++-11 \
    gcc-11 \
    git \
    jq \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    openjdk-17-jdk \
    openssl \
    scons \
    vim \
    wget \
    unzip \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
 && apt-get autoremove -y \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

 # Set default gcc, python and pip versions
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 1 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 1 && \
    update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-11 1

# Install NCCL
RUN cd /tmp \
 && git clone https://github.com/NVIDIA/nccl.git -b v${NCCL_VERSION}-1 \
 && cd nccl \
 && make -j64 src.build BUILDDIR=/usr/local \
 && rm -rf /tmp/nccl
# preload system nccl for PyTorch to use if it is dynamically linking NCCL
ENV LD_PRELOAD="/usr/local/lib/libnccl.so"

# Install OpenMPI
RUN wget https://www.open-mpi.org/software/ompi/v4.1/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \
 && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \
 && cd openmpi-$OPEN_MPI_VERSION \
 && ./configure --prefix=/home/.openmpi --with-cuda \
 && make all install \
 && cd .. \
 && rm openmpi-$OPEN_MPI_VERSION.tar.gz \
 && rm -rf openmpi-$OPEN_MPI_VERSION

# The ENV variables declared below are changed in the previous section
# Grouping these ENV variables in the first section causes
# ompi_info to fail. This is only observed in CPU containers
ENV PATH="$PATH:/home/.openmpi/bin"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/.openmpi/lib/"
RUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value

# Install CondaForge miniconda
RUN curl -L -o ~/miniforge3.sh https://github.com/conda-forge/miniforge/releases/download/${MAMBA_VERSION}/Miniforge3-${MAMBA_VERSION}-Linux-aarch64.sh \
 && chmod +x ~/miniforge3.sh \
 && ~/miniforge3.sh -b -p /opt/conda \
 && rm ~/miniforge3.sh \
 && /opt/conda/bin/conda install -c conda-forge -y python=$PYTHON_VERSION \
    ruamel_yaml \
    cython \
    ipython \
    parso \
    # Below 2 are included in miniconda base, but not mamba so need to install
    conda-content-trust \
    charset-normalizer \
    requests \
 && conda clean -ya

# Install Common python packages
RUN ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \
 && pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org \
 && pip install \
    boto3 \
    scipy \
    opencv-python \
    nvgpu \
    "numpy<2" \
    "pyopenssl>=24.1.0" \
    "cryptography>=41.0.2" \
    "ipython>=8.10.0,<9.0" \
    "awscli<2" \
    "urllib3>=1.26.18,<2" \
    "idna>=3.7" \
    "tqdm>=4.66.3"

# Ensure PyTorch did not get installed from Conda or pip, prior to now
RUN pip uninstall -y torch torchvision torchaudio torchdata model-archiver multi-model-server

# install pytorch wheels
RUN pip install --no-cache-dir -U \
    ${TORCH_URL} \
    ${TORCHVISION_URL} \
    ${TORCHAUDIO_URL} \
    ${TORCHTEXT_URL}

# Install TorchServe pypi dependencies directly from their requirements.txt file
RUN pip install --no-cache-dir -U -r https://raw.githubusercontent.com/pytorch/serve/v${TORCHSERVE_VERSION}/requirements/common.txt \
 && pip install --no-cache-dir -U \
    torchserve==${TORCHSERVE_VERSION} \
    torch-model-archiver==${TORCHSERVE_VERSION}

# Patches
# py-vuln: 71064
RUN pip install --no-cache-dir -U "requests>=2.32.3"

# add necessary certificate for aws sdk cpp download
RUN mkdir -p /etc/pki/tls/certs && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt

# create user and folders
RUN useradd -m model-server \
 && mkdir -p /tmp /opt/ml/model \
 && chown -R model-server /home/model-server /opt/ml/model

# add TS entrypoint
COPY torchserve-ec2-entrypoint.py /usr/local/bin/dockerd-entrypoint.py
COPY config.properties /home/model-server/config.properties
RUN chmod +x /usr/local/bin/dockerd-entrypoint.py

# add telemetry
COPY deep_learning_container.py /usr/local/bin/deep_learning_container.py
RUN chmod +x /usr/local/bin/deep_learning_container.py

RUN HOME_DIR=/root \
 && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
 && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
 && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
 && chmod +x /usr/local/bin/testOSSCompliance \
 && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
 && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
 && cp ${HOME_DIR}/oss_compliance/build_from_source_packages/BUILD_FROM_SOURCE_PACKAGES_LICENCES_AARCH64_IMAGES ${HOME_DIR} \
 && rm -rf ${HOME_DIR}/oss_compliance*

RUN curl -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/pytorch-2.4/license.txt

## Cleanup ##
RUN pip cache purge \
 && rm -rf /tmp/tmp* \
 && rm -iRf /root/.cache

EXPOSE 8080 8081
ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
CMD ["torchserve", "--start", "--ts-config", "/home/model-server/config.properties"]

#################################################################
#  ____                   __  __       _
# / ___|  __ _  __ _  ___|  \/  | __ _| | _____ _ __
# \___ \ / _` |/ _` |/ _ \ |\/| |/ _` | |/ / _ \ '__|
#  ___) | (_| | (_| |  __/ |  | | (_| |   <  __/ |
# |____/ \__,_|\__, |\___|_|  |_|\__,_|_|\_\___|_|
#              |___/
#  ___                              ____           _
# |_ _|_ __ ___   __ _  __ _  ___  |  _ \ ___  ___(_)_ __   ___
#  | || '_ ` _ \ / _` |/ _` |/ _ \ | |_) / _ \/ __| | '_ \ / _ \
#  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/
# |___|_| |_| |_|\__,_|\__, |\___| |_| \_\___|\___|_| .__/ \___|
#                      |___/                        |_|
#
#################################################################

# FROM ec2 AS sagemaker

# LABEL maintainer="Amazon AI"
# LABEL dlc_major_version="1"
# LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true
# LABEL com.amazonaws.sagemaker.capabilities.multi-models=true
# LABEL com.amazonaws.sagemaker.inference.cuda.verified_versions=12.2

# ARG PYTHON
# ARG SM_TOOLKIT_VERSION
# ARG TORCHSERVE_VERSION

# ENV SAGEMAKER_SERVING_MODULE sagemaker_pytorch_serving_container.serving:main
# ENV TS_DISABLE_SYSTEM_METRICS=true

# # Install scikit-learn and pandas
# RUN pip install scikit-learn pandas

# RUN pip install --no-cache-dir sagemaker-pytorch-inference==${SM_TOOLKIT_VERSION}

# COPY torchserve-entrypoint.py /usr/local/bin/dockerd-entrypoint.py

# RUN chmod +x /usr/local/bin/dockerd-entrypoint.py

# RUN HOME_DIR=/root \
#  && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
#  && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
#  && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
#  && chmod +x /usr/local/bin/testOSSCompliance \
#  && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
#  && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
#  && rm -rf ${HOME_DIR}/oss_compliance*

# ## Cleanup ##
# RUN rm -rf /tmp/tmp* \
#  &&rm -iRf /root/.cache

# EXPOSE 8080 8081
# ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
# CMD ["torchserve", "--start", "--ts-config", "/home/model-server/config.properties", "--model-store", "/home/model-server/"]
