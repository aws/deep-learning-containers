FROM nvidia/cuda:11.1.1-base-ubuntu20.04


LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"
LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true

ARG PYTHON=python3
ARG PYTHON_VERSION=3.8.10

# PyTorch Binaries
ARG PT_INFERENCE_URL=https://pytorch-ei-binaries.s3.us-west-2.amazonaws.com/r1.9.0_inference/20210617-030314/46d3d4fb3c4208f6fcdf1e6aca78ed1fc9155236/gpu/torch-1.9.0-cp38-cp38-manylinux1_x86_64.whl
ARG PT_TORCHVISION_URL=https://pytorch-ei-binaries.s3.us-west-2.amazonaws.com/torchvision_build/0.10.0/gpu/torchvision-0.10.0-cp38-cp38-linux_x86_64.whl
ARG PT_TORCHAUDIO_URL=https://pytorch-ei-binaries.s3.us-west-2.amazonaws.com/torchaudio_build/0.9.0/gpu/torchaudio-0.9.0-cp38-cp38-linux_x86_64.whl

ARG OPEN_MPI_VERSION=4.0.1
ARG TS_VERSION=0.4.0
ARG CUBLAS_VERSION=11.3.0.106

ARG DEBIAN_FRONTEND=noninteractive
# See http://bugs.python.org/issue19846
ENV LANG C.UTF-8
ENV LD_LIBRARY_PATH /opt/conda/lib/:$LD_LIBRARY_PATH
ENV PATH /opt/conda/bin:$PATH
ENV SAGEMAKER_SERVING_MODULE sagemaker_pytorch_serving_container.serving:main
ENV TEMP=/home/model-server/tmp
ENV CUDNN_VERSION=8.0.5.39
ENV NCCL_VERSION=2.7.8
ENV EFA_VERSION=1.11.2
ENV OMPI_VERSION=4.1.1
ENV NVML_VERSION=11.1.74
ENV TORCH_CUDA_ARCH_LIST="3.7 5.0 7.0+PTX 8.0"

RUN apt-get update \
    && apt-get install -y --no-install-recommends software-properties-common \
    && add-apt-repository ppa:openjdk-r/ppa \
    && apt-get update \
    && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
    build-essential \
    ca-certificates \
    cmake \
    cuda-command-line-tools-11-1 \
    cuda-cudart-11-1 \
    cuda-libraries-dev-11-1 \
    curl \
    emacs \
    git \
    jq \
    libcublas-11-1=${CUBLAS_VERSION}-1 \
    libcublas-dev-11-1=${CUBLAS_VERSION}-1 \
    libcudnn8=$CUDNN_VERSION-1+cuda11.1 \
    libcufft-dev-11-1 \
    libcurand-dev-11-1 \
    libcusolver-dev-11-1 \
    libcusparse-dev-11-1 \
    cuda-nvml-dev-11-1=${NVML_VERSION}-1 \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgomp1 \
    libibverbs-dev \
    libnuma1 \
    libnuma-dev \
    libsm6 \
    libssl1.1 \
    libxext6 \
    libxrender-dev \
    openjdk-11-jdk \
    openssl \
    vim \
    wget \
    unzip \
    zlib1g-dev \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

RUN cd /tmp \
  && git clone https://github.com/NVIDIA/nccl.git -b v${NCCL_VERSION}-1 \
  && cd nccl \
  && make -j64 src.build BUILDDIR=/usr/local \
  && rm -rf /tmp/nccl

# https://github.com/docker-library/openjdk/issues/261 https://github.com/docker-library/openjdk/pull/263/files
RUN keytool -importkeystore -srckeystore /etc/ssl/certs/java/cacerts -destkeystore /etc/ssl/certs/java/cacerts.jks -deststoretype JKS -srcstorepass changeit -deststorepass changeit -noprompt; \
    mv /etc/ssl/certs/java/cacerts.jks /etc/ssl/certs/java/cacerts; \
    /var/lib/dpkg/info/ca-certificates-java.postinst configure;

RUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \
 && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \
 && cd openmpi-$OPEN_MPI_VERSION \
 && ./configure --prefix=/home/.openmpi \
 && make all install \
 && cd .. \
 && rm openmpi-$OPEN_MPI_VERSION.tar.gz \
 && rm -rf openmpi-$OPEN_MPI_VERSION

ENV PATH="$PATH:/home/.openmpi/bin"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/.openmpi/lib/"

# Install OpenSSH. Allow OpenSSH to talk to containers without asking for confirmation
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    openssh-client \
    openssh-server \
 && mkdir -p /var/run/sshd \
 && cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \
 && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new \
 && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_configs \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

RUN curl -L -o ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
 && chmod +x ~/miniconda.sh \
 && ~/miniconda.sh -b -p /opt/conda \
 && rm ~/miniconda.sh \
 && /opt/conda/bin/conda update conda \
 && /opt/conda/bin/conda install -c conda-forge \
    python=$PYTHON_VERSION \
 && /opt/conda/bin/conda install -y \
    # conda 4.10.0 requires ruamel_yaml to be installed. Currently pinned at latest.
    ruamel_yaml==0.15.100 \
    cython \
    ipython \
    mkl-include \
    mkl \
    parso \
    scipy \
    typing \
 && /opt/conda/bin/conda clean -ya

RUN conda install -c \
    pytorch magma-cuda111 \
 && conda install -c \
    conda-forge \
    opencv \
 && conda install -y \
    scikit-learn \
    pandas \
    h5py \
    requests \
 && conda clean -ya \
 && /opt/conda/bin/conda config --set ssl_verify False \
 && pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org \
 && ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \
 && pip install packaging==20.4 \
    enum-compat==0.0.3 \
    numpy==1.20.3 \
    "cryptography>=3.3.2"

# Conda installs links for libtinfo.so.6 and libtinfo.so.6.2 both
# Which causes "/opt/conda/lib/libtinfo.so.6: no version information available" warning
# Removing link for libtinfo.so.6. This change is needed only for ubuntu 20.04-conda, and can be reverted
# once conda fixes the issue: https://github.com/conda/conda/issues/9680
RUN rm -rf /opt/conda/lib/libtinfo.so.6

# Uninstall and re-install torch and torchvision from the PyTorch website
RUN pip uninstall -y torch \
 && pip install --no-cache-dir -U $PT_INFERENCE_URL \
 && pip uninstall -y torchvision \
 && pip install --no-deps --no-cache-dir -U $PT_TORCHVISION_URL \
 && pip uninstall -y torchaudio \
 && pip install --no-deps --no-cache-dir -U $PT_TORCHAUDIO_URL

RUN conda install -y -c conda-forge "pyyaml>=5.4,<5.5"
RUN pip install pillow==8.2.0 "awscli<2"

RUN pip install --no-cache-dir "sagemaker-pytorch-inference>=2"

RUN pip uninstall -y model-archiver multi-model-server \
 && pip install captum \
 && pip install torchserve==$TS_VERSION \
 && pip install torch-model-archiver==$TS_VERSION

RUN cd tmp/ \
 && rm -rf tmp*

RUN useradd -m model-server \
 && mkdir -p /home/model-server/tmp /opt/ml/model \
 && chown -R model-server /home/model-server /opt/ml/model

COPY torchserve-entrypoint.py /usr/local/bin/dockerd-entrypoint.py
COPY config.properties /home/model-server

RUN chmod +x /usr/local/bin/dockerd-entrypoint.py

COPY deep_learning_container.py /usr/local/bin/deep_learning_container.py

RUN chmod +x /usr/local/bin/deep_learning_container.py

RUN HOME_DIR=/root \
 && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
 && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
 && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
 && chmod +x /usr/local/bin/testOSSCompliance \
 && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
 && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
 && rm -rf ${HOME_DIR}/oss_compliance*

RUN curl -o /license.txt  https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.9/license.txt

EXPOSE 8080 8081
ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
CMD ["torchserve", "--start", "--ts-config", "/home/model-server/config.properties", "--model-store", "/home/model-server/"]
