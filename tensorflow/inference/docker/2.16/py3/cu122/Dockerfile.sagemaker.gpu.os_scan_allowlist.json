{
  "linux": [
    {
      "description": " In the Linux kernel, the following vulnerability has been resolved: bpf: Fix stackmap overflow check on 32-bit arches The stackmap code relies on roundup_pow_of_two() to compute the number of hash buckets, and contains an overflow check by checking if the resulting value is 0. However, on 32-bit arches, the roundup code itself can overflow by doing a 32-bit left-shift of an unsigned long value, which is undefined behaviour, so it is not guaranteed to truncate neatly. This was triggered by syzbot on the DEVMAP_HASH type, which contains the same check, copied from the hashtab code. The commit in the fixes tag actually attempted to fix this, but the fix did not account for the UB, so the fix only works on CPUs where an overflow does result in a neat truncation to zero, which is not guaranteed. Checking the value before rounding does not have this problem.",
      "vulnerability_id": "CVE-2024-26883",
      "name": "CVE-2024-26883",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "187.207"
      },
      "remediation": {
        "recommendation": {
          "text": "None Provided"
        }
      },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-26883.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-26883 - linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": " In the Linux kernel, the following vulnerability has been resolved: aoe: fix the potential use-after-free problem in aoecmd_cfg_pkts This patch is against CVE-2023-6270. The description of cve is: A flaw was found in the ATA over Ethernet (AoE) driver in the Linux kernel. The aoecmd_cfg_pkts() function improperly updates the refcnt on `struct net_device`, and a use-after-free can be triggered by racing between the free on the struct and the access through the `skbtxq` global queue. This could lead to a denial of service condition or potential code execution. In aoecmd_cfg_pkts(), it always calls dev_put(ifp) when skb initial code is finished. But the net_device ifp will still be used in later tx()->dev_queue_xmit() in kthread. Which means that the dev_put(ifp) should NOT be called in the success path of skb initial code in aoecmd_cfg_pkts(). Otherwise tx() may run into use-after-free because the net_device is freed. This patch removed the dev_put(ifp) in the success path in aoecmd_cfg_pkts(), and added dev_p",
      "vulnerability_id": "CVE-2024-26898",
      "name": "CVE-2024-26898",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "187.207"
      },
      "remediation": {
        "recommendation": {
          "text": "None Provided"
        }
      },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-26898.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-26898 - linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": " In the Linux kernel, the following vulnerability has been resolved: net: ip_tunnel: make sure to pull inner header in ip_tunnel_rcv() Apply the same fix than ones found in : 8d975c15c0cd (\"ip6_tunnel: make sure to pull inner header in __ip6_tnl_rcv()\") 1ca1ba465e55 (\"geneve: make sure to pull inner header in geneve_rx()\") We have to save skb->network_header in a temporary variable in order to be able to recompute the network_header pointer after a pskb_inet_may_pull() call. pskb_inet_may_pull() makes sure the needed headers are in skb->head. syzbot reported: BUG: KMSAN: uninit-value in __INET_ECN_decapsulate include/net/inet_ecn.h:253 [inline] BUG: KMSAN: uninit-value in INET_ECN_decapsulate include/net/inet_ecn.h:275 [inline] BUG: KMSAN: uninit-value in IP_ECN_decapsulate include/net/inet_ecn.h:302 [inline] BUG: KMSAN: uninit-value in ip_tunnel_rcv+0xed9/0x2ed0 net/ipv4/ip_tunnel.c:409 __INET_ECN_decapsulate include/net/inet_ecn.h:253 [inline] INET_ECN_decapsulate include/net/inet_ecn.h:275 [inline] IP_ECN_",
      "vulnerability_id": "CVE-2024-26882",
      "name": "CVE-2024-26882",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "187.207"
      },
      "remediation": {
        "recommendation": {
          "text": "None Provided"
        }
      },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-26882.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-26882 - linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": " In the Linux kernel, the following vulnerability has been resolved: netfilter: nf_tables: Fix potential data-race in __nft_expr_type_get() nft_unregister_expr() can concurrent with __nft_expr_type_get(), and there is not any protection when iterate over nf_tables_expressions list in __nft_expr_type_get(). Therefore, there is potential data-race of nf_tables_expressions list entry. Use list_for_each_entry_rcu() to iterate over nf_tables_expressions list in __nft_expr_type_get(), and use rcu_read_lock() in the caller nft_expr_type_get() to protect the entire type query process.",
      "vulnerability_id": "CVE-2024-27020",
      "name": "CVE-2024-27020",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "187.207"
      },
      "remediation": {
        "recommendation": {
          "text": "None Provided"
        }
      },
      "cvss_v3_score": 7.0,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.0,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-27020.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-27020 - linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": " In the Linux kernel, the following vulnerability has been resolved: bpf: Fix hashtab overflow check on 32-bit arches The hashtab code relies on roundup_pow_of_two() to compute the number of hash buckets, and contains an overflow check by checking if the resulting value is 0. However, on 32-bit arches, the roundup code itself can overflow by doing a 32-bit left-shift of an unsigned long value, which is undefined behaviour, so it is not guaranteed to truncate neatly. This was triggered by syzbot on the DEVMAP_HASH type, which contains the same check, copied from the hashtab code. So apply the same fix to hashtab, by moving the overflow check to before the roundup.",
      "vulnerability_id": "CVE-2024-26884",
      "name": "CVE-2024-26884",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "187.207"
      },
      "remediation": {
        "recommendation": {
          "text": "None Provided"
        }
      },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-26884.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-26884 - linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": " In the Linux kernel, the following vulnerability has been resolved: USB: core: Fix deadlock in usb_deauthorize_interface() Among the attribute file callback routines in drivers/usb/core/sysfs.c, the interface_authorized_store() function is the only one which acquires a device lock on an ancestor device: It calls usb_deauthorize_interface(), which locks the interface's parent USB device. The will lead to deadlock if another process already owns that lock and tries to remove the interface, whether through a configuration change or because the device has been disconnected. As part of the removal procedure, device_del() waits for all ongoing sysfs attribute callbacks to complete. But usb_deauthorize_interface() can't complete until the device lock has been released, and the lock won't be released until the removal has finished. The mechanism provided by sysfs to prevent this kind of deadlock is to use the sysfs_break_active_protection() function, which tells sysfs not to wait for the attribute callback. Reported",
      "vulnerability_id": "CVE-2024-26934",
      "name": "CVE-2024-26934",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "187.207"
      },
      "remediation": {
        "recommendation": {
          "text": "None Provided"
        }
      },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-26934.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-26934 - linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: wifi: mac80211: Avoid address calculations via out of bounds array indexing req->n_channels must be set before req->channels[] can be used. This patch fixes one of the issues encountered in [1]. [ 83.964255] UBSAN: array-index-out-of-bounds in net/mac80211/scan.c:364:4 [ 83.964258] index 0 is out of range for type 'struct ieee80211_channel *[]' [...] [ 83.964264] Call Trace: [ 83.964267] <TASK> [ 83.964269] dump_stack_lvl+0x3f/0xc0 [ 83.964274] __ubsan_handle_out_of_bounds+0xec/0x110 [ 83.964278] ieee80211_prep_hw_scan+0x2db/0x4b0 [ 83.964281] __ieee80211_start_scan+0x601/0x990 [ 83.964291] nl80211_trigger_scan+0x874/0x980 [ 83.964295] genl_family_rcv_msg_doit+0xe8/0x160 [ 83.964298] genl_rcv_msg+0x240/0x270 [...] [1] https://bugzilla.kernel.org/show_bug.cgi?id=218810",
      "vulnerability_id": "CVE-2024-41071",
      "name": "CVE-2024-41071",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-41071.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-41071 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: tipc: Return non-zero value from tipc_udp_addr2str() on error tipc_udp_addr2str() should return non-zero value if the UDP media address is invalid. Otherwise, a buffer overflow access can occur in tipc_media_addr_printf(). Fix this by returning 1 on an invalid UDP media address.",
      "vulnerability_id": "CVE-2024-42284",
      "name": "CVE-2024-42284",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42284.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42284 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: hwmon: (nct6775-core) Fix underflows seen when writing limit attributes DIV_ROUND_CLOSEST() after kstrtol() results in an underflow if a large negative number such as -9223372036854775808 is provided by the user. Fix it by reordering clamp_val() and DIV_ROUND_CLOSEST() operations.",
      "vulnerability_id": "CVE-2024-46757",
      "name": "CVE-2024-46757",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46757.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46757 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: hwmon: (adc128d818) Fix underflows seen when writing limit attributes DIV_ROUND_CLOSEST() after kstrtol() results in an underflow if a large negative number such as -9223372036854775808 is provided by the user. Fix it by reordering clamp_val() and DIV_ROUND_CLOSEST() operations.",
      "vulnerability_id": "CVE-2024-46759",
      "name": "CVE-2024-46759",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46759.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46759 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: hwmon: (w83627ehf) Fix underflows seen when writing limit attributes DIV_ROUND_CLOSEST() after kstrtol() results in an underflow if a large negative number such as -9223372036854775808 is provided by the user. Fix it by reordering clamp_val() and DIV_ROUND_CLOSEST() operations.",
      "vulnerability_id": "CVE-2024-46756",
      "name": "CVE-2024-46756",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46756.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46756 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: drm/amdgpu: fix mc_data out-of-bounds read warning Clear warning that read mc_data[i-1] may out-of-bounds.",
      "vulnerability_id": "CVE-2024-46722",
      "name": "CVE-2024-46722",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46722.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46722 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: ila: call nf_unregister_net_hooks() sooner syzbot found an use-after-free Read in ila_nf_input [1] Issue here is that ila_xlat_exit_net() frees the rhashtable, then call nf_unregister_net_hooks(). It should be done in the reverse way, with a synchronize_rcu(). This is a good match for a pre_exit() method. [1] BUG: KASAN: use-after-free in rht_key_hashfn include/linux/rhashtable.h:159 [inline] BUG: KASAN: use-after-free in __rhashtable_lookup include/linux/rhashtable.h:604 [inline] BUG: KASAN: use-after-free in rhashtable_lookup include/linux/rhashtable.h:646 [inline] BUG: KASAN: use-after-free in rhashtable_lookup_fast+0x77a/0x9b0 include/linux/rhashtable.h:672 Read of size 4 at addr ffff888064620008 by task ksoftirqd/0/16 CPU: 0 UID: 0 PID: 16 Comm: ksoftirqd/0 Not tainted 6.11.0-rc4-syzkaller-00238-g2ad6d23f465a #0 Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/06/2024 Call Trace: <TASK> __dump_stack lib/d",
      "vulnerability_id": "CVE-2024-46782",
      "name": "CVE-2024-46782",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46782.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46782 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: drm/amdkfd: don't allow mapping the MMIO HDP page with large pages We don't get the right offset in that case. The GPU has an unused 4K area of the register BAR space into which you can remap registers. We remap the HDP flush registers into this space to allow userspace (CPU or GPU) to flush the HDP when it updates VRAM. However, on systems with >4K pages, we end up exposing PAGE_SIZE of MMIO space.",
      "vulnerability_id": "CVE-2024-41011",
      "name": "CVE-2024-41011",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-41011.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-41011 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: um: line: always fill *error_out in setup_one_line() The pointer isn't initialized by callers, but I have encountered cases where it's still printed; initialize it in all possible cases in setup_one_line().",
      "vulnerability_id": "CVE-2024-46844",
      "name": "CVE-2024-46844",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46844.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46844 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: KVM: PPC: Book3S HV: Prevent UAF in kvm_spapr_tce_attach_iommu_group() Al reported a possible use-after-free (UAF) in kvm_spapr_tce_attach_iommu_group(). It looks up `stt` from tablefd, but then continues to use it after doing fdput() on the returned fd. After the fdput() the tablefd is free to be closed by another thread. The close calls kvm_spapr_tce_release() and then release_spapr_tce_table() (via call_rcu()) which frees `stt`. Although there are calls to rcu_read_lock() in kvm_spapr_tce_attach_iommu_group() they are not sufficient to prevent the UAF, because `stt` is used outside the locked regions. With an artifcial delay after the fdput() and a userspace program which triggers the race, KASAN detects the UAF: BUG: KASAN: slab-use-after-free in kvm_spapr_tce_attach_iommu_group+0x298/0x720 [kvm] Read of size 4 at addr c000200027552c30 by task kvm-vfio/2505 CPU: 54 PID: 2505 Comm: kvm-vfio Not tainted 6.10.0-rc3-next-20240612-dirty #1 Har",
      "vulnerability_id": "CVE-2024-41070",
      "name": "CVE-2024-41070",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-41070.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-41070 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: drm/amdgpu: fix ucode out-of-bounds read warning Clear warning that read ucode[] may out-of-bounds.",
      "vulnerability_id": "CVE-2024-46723",
      "name": "CVE-2024-46723",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46723.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46723 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: of/irq: Prevent device address out-of-bounds read in interrupt map walk When of_irq_parse_raw() is invoked with a device address smaller than the interrupt parent node (from #address-cells property), KASAN detects the following out-of-bounds read when populating the initial match table (dyndbg=\"func of_irq_parse_* +p\"): OF: of_irq_parse_one: dev=/soc@0/picasso/watchdog, index=0 OF: parent=/soc@0/pci@878000000000/gpio0@17,0, intsize=2 OF: intspec=4 OF: of_irq_parse_raw: ipar=/soc@0/pci@878000000000/gpio0@17,0, size=2 OF: -> addrsize=3 ================================================================== BUG: KASAN: slab-out-of-bounds in of_irq_parse_raw+0x2b8/0x8d0 Read of size 4 at addr ffffff81beca5608 by task bash/764 CPU: 1 PID: 764 Comm: bash Tainted: G O 6.1.67-484c613561-nokia_sm_arm64 #1 Hardware name: Unknown Unknown Product/Unknown Product, BIOS 2023.01-12.24.03-dirty 01/01/2023 Call trace: dump_backtrace+0xdc/0x130 show_stack+0x1c/0x30",
      "vulnerability_id": "CVE-2024-46743",
      "name": "CVE-2024-46743",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46743.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46743 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: ipv6: prevent UAF in ip6_send_skb() syzbot reported an UAF in ip6_send_skb() [1] After ip6_local_out() has returned, we no longer can safely dereference rt, unless we hold rcu_read_lock(). A similar issue has been fixed in commit a688caa34beb (\"ipv6: take rcu lock in rawv6_send_hdrinc()\") Another potential issue in ip6_finish_output2() is handled in a separate patch. [1] BUG: KASAN: slab-use-after-free in ip6_send_skb+0x18d/0x230 net/ipv6/ip6_output.c:1964 Read of size 8 at addr ffff88806dde4858 by task syz.1.380/6530 CPU: 1 UID: 0 PID: 6530 Comm: syz.1.380 Not tainted 6.11.0-rc3-syzkaller-00306-gdf6cbc62cc9b #0 Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/06/2024 Call Trace: <TASK> __dump_stack lib/dump_stack.c:93 [inline] dump_stack_lvl+0x241/0x360 lib/dump_stack.c:119 print_address_description mm/kasan/report.c:377 [inline] print_report+0x169/0x550 mm/kasan/report.c:488 kasan_report+0x143/0x180 mm/kasan",
      "vulnerability_id": "CVE-2024-44987",
      "name": "CVE-2024-44987",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-44987.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-44987 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: s390/dasd: fix error recovery leading to data corruption on ESE devices Extent Space Efficient (ESE) or thin provisioned volumes need to be formatted on demand during usual IO processing. The dasd_ese_needs_format function checks for error codes that signal the non existence of a proper track format. The check for incorrect length is to imprecise since other error cases leading to transport of insufficient data also have this flag set. This might lead to data corruption in certain error cases for example during a storage server warmstart. Fix by removing the check for incorrect length and replacing by explicitly checking for invalid track format in transport mode. Also remove the check for file protected since this is not a valid ESE handling case.",
      "vulnerability_id": "CVE-2024-45026",
      "name": "CVE-2024-45026",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-45026.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-45026 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: net/iucv: fix use after free in iucv_sock_close() iucv_sever_path() is called from process context and from bh context. iucv->path is used as indicator whether somebody else is taking care of severing the path (or it is already removed / never existed). This needs to be done with atomic compare and swap, otherwise there is a small window where iucv_sock_close() will try to work with a path that has already been severed and freed by iucv_callback_connrej() called by iucv_tasklet_fn(). Example: [452744.123844] Call Trace: [452744.123845] ([<0000001e87f03880>] 0x1e87f03880) [452744.123966] [<00000000d593001e>] iucv_path_sever+0x96/0x138 [452744.124330] [<000003ff801ddbca>] iucv_sever_path+0xc2/0xd0 [af_iucv] [452744.124336] [<000003ff801e01b6>] iucv_sock_close+0xa6/0x310 [af_iucv] [452744.124341] [<000003ff801e08cc>] iucv_sock_release+0x3c/0xd0 [af_iucv] [452744.124345] [<00000000d574794e>] __sock_release+0x5e/0xe8 [452744.124815] [<00000000d574",
      "vulnerability_id": "CVE-2024-42271",
      "name": "CVE-2024-42271",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42271.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42271 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: hwmon: (lm95234) Fix underflows seen when writing limit attributes DIV_ROUND_CLOSEST() after kstrtol() results in an underflow if a large negative number such as -9223372036854775808 is provided by the user. Fix it by reordering clamp_val() and DIV_ROUND_CLOSEST() operations.",
      "vulnerability_id": "CVE-2024-46758",
      "name": "CVE-2024-46758",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46758.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46758 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: sch/netem: fix use after free in netem_dequeue If netem_dequeue() enqueues packet to inner qdisc and that qdisc returns __NET_XMIT_STOLEN. The packet is dropped but qdisc_tree_reduce_backlog() is not called to update the parent's q.qlen, leading to the similar use-after-free as Commit e04991a48dbaf382 (\"netem: fix return value if duplicate enqueue fails\") Commands to trigger KASAN UaF: ip link add type dummy ip link set lo up ip link set dummy0 up tc qdisc add dev lo parent root handle 1: drr tc filter add dev lo parent 1: basic classid 1:1 tc class add dev lo classid 1:1 drr tc qdisc add dev lo parent 1:1 handle 2: netem tc qdisc add dev lo parent 2: handle 3: drr tc filter add dev lo parent 3: basic classid 3:1 action mirred egress redirect dev dummy0 tc class add dev lo classid 3:1 drr ping -c1 -W0.01 localhost # Trigger bug tc class del dev lo classid 1:1 tc class add dev lo classid 1:1 drr ping -c1 -W0.01 localhost # UaF",
      "vulnerability_id": "CVE-2024-46800",
      "name": "CVE-2024-46800",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46800.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46800 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: gtp: pull network headers in gtp_dev_xmit() syzbot/KMSAN reported use of uninit-value in get_dev_xmit() [1] We must make sure the IPv4 or Ipv6 header is pulled in skb->head before accessing fields in them. Use pskb_inet_may_pull() to fix this issue. [1] BUG: KMSAN: uninit-value in ipv6_pdp_find drivers/net/gtp.c:220 [inline] BUG: KMSAN: uninit-value in gtp_build_skb_ip6 drivers/net/gtp.c:1229 [inline] BUG: KMSAN: uninit-value in gtp_dev_xmit+0x1424/0x2540 drivers/net/gtp.c:1281 ipv6_pdp_find drivers/net/gtp.c:220 [inline] gtp_build_skb_ip6 drivers/net/gtp.c:1229 [inline] gtp_dev_xmit+0x1424/0x2540 drivers/net/gtp.c:1281 __netdev_start_xmit include/linux/netdevice.h:4913 [inline] netdev_start_xmit include/linux/netdevice.h:4922 [inline] xmit_one net/core/dev.c:3580 [inline] dev_hard_start_xmit+0x247/0xa20 net/core/dev.c:3596 __dev_queue_xmit+0x358c/0x5610 net/core/dev.c:4423 dev_queue_xmit include/linux/netdevice.h:3105 [inline] packet_xmit+0x",
      "vulnerability_id": "CVE-2024-44999",
      "name": "CVE-2024-44999",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-44999.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-44999 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: scsi: aacraid: Fix double-free on probe failure aac_probe_one() calls hardware-specific init functions through the aac_driver_ident::init pointer, all of which eventually call down to aac_init_adapter(). If aac_init_adapter() fails after allocating memory for aac_dev::queues, it frees the memory but does not clear that member. After the hardware-specific init function returns an error, aac_probe_one() goes down an error path that frees the memory pointed to by aac_dev::queues, resulting.in a double-free.",
      "vulnerability_id": "CVE-2024-46673",
      "name": "CVE-2024-46673",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46673.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46673 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: HID: cougar: fix slab-out-of-bounds Read in cougar_report_fixup report_fixup for the Cougar 500k Gaming Keyboard was not verifying that the report descriptor size was correct before accessing it",
      "vulnerability_id": "CVE-2024-46747",
      "name": "CVE-2024-46747",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46747.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46747 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: ASoC: dapm: Fix UAF for snd_soc_pcm_runtime object When using kernel with the following extra config, - CONFIG_KASAN=y - CONFIG_KASAN_GENERIC=y - CONFIG_KASAN_INLINE=y - CONFIG_KASAN_VMALLOC=y - CONFIG_FRAME_WARN=4096 kernel detects that snd_pcm_suspend_all() access a freed 'snd_soc_pcm_runtime' object when the system is suspended, which leads to a use-after-free bug: [ 52.047746] BUG: KASAN: use-after-free in snd_pcm_suspend_all+0x1a8/0x270 [ 52.047765] Read of size 1 at addr ffff0000b9434d50 by task systemd-sleep/2330 [ 52.047785] Call trace: [ 52.047787] dump_backtrace+0x0/0x3c0 [ 52.047794] show_stack+0x34/0x50 [ 52.047797] dump_stack_lvl+0x68/0x8c [ 52.047802] print_address_description.constprop.0+0x74/0x2c0 [ 52.047809] kasan_report+0x210/0x230 [ 52.047815] __asan_report_load1_noabort+0x3c/0x50 [ 52.047820] snd_pcm_suspend_all+0x1a8/0x270 [ 52.047824] snd_soc_suspend+0x19c/0x4e0 The snd_pcm_sync_stop() has a NULL check on 'substream->ru",
      "vulnerability_id": "CVE-2024-46798",
      "name": "CVE-2024-46798",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46798.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46798 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: atm: idt77252: prevent use after free in dequeue_rx() We can't dereference \"skb\" after calling vcc->push() because the skb is released.",
      "vulnerability_id": "CVE-2024-44998",
      "name": "CVE-2024-44998",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-44998.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-44998 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: Squashfs: sanity check symbolic link size Syzkiller reports a \"KMSAN: uninit-value in pick_link\" bug. This is caused by an uninitialised page, which is ultimately caused by a corrupted symbolic link size read from disk. The reason why the corrupted symlink size causes an uninitialised page is due to the following sequence of events: 1. squashfs_read_inode() is called to read the symbolic link from disk. This assigns the corrupted value 3875536935 to inode->i_size. 2. Later squashfs_symlink_read_folio() is called, which assigns this corrupted value to the length variable, which being a signed int, overflows producing a negative number. 3. The following loop that fills in the page contents checks that the copied bytes is less than length, which being negative means the loop is skipped, producing an uninitialised page. This patch adds a sanity check which checks that the symbolic link size is not larger than expected. -- V2: fix spelling mistake",
      "vulnerability_id": "CVE-2024-46744",
      "name": "CVE-2024-46744",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46744.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46744 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: VMCI: Fix use-after-free when removing resource in vmci_resource_remove() When removing a resource from vmci_resource_table in vmci_resource_remove(), the search is performed using the resource handle by comparing context and resource fields. It is possible though to create two resources with different types but same handle (same context and resource fields). When trying to remove one of the resources, vmci_resource_remove() may not remove the intended one, but the object will still be freed as in the case of the datagram type in vmci_datagram_destroy_handle(). vmci_resource_table will still hold a pointer to this freed resource leading to a use-after-free vulnerability. BUG: KASAN: use-after-free in vmci_handle_is_equal include/linux/vmw_vmci_defs.h:142 [inline] BUG: KASAN: use-after-free in vmci_resource_remove+0x3a1/0x410 drivers/misc/vmw_vmci/vmci_resource.c:147 Read of size 4 at addr ffff88801c16d800 by task syz-executor197/1592 Call Tra",
      "vulnerability_id": "CVE-2024-46738",
      "name": "CVE-2024-46738",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46738.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46738 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: nvme: avoid double free special payload If a discard request needs to be retried, and that retry may fail before a new special payload is added, a double free will result. Clear the RQF_SPECIAL_LOAD when the request is cleaned.",
      "vulnerability_id": "CVE-2024-41073",
      "name": "CVE-2024-41073",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-41073.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-41073 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: media: venus: fix use after free in vdec_close There appears to be a possible use after free with vdec_close(). The firmware will add buffer release work to the work queue through HFI callbacks as a normal part of decoding. Randomly closing the decoder device from userspace during normal decoding can incur a read after free for inst. Fix it by cancelling the work in vdec_close.",
      "vulnerability_id": "CVE-2024-42313",
      "name": "CVE-2024-42313",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42313.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42313 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: binder: fix UAF caused by offsets overwrite Binder objects are processed and copied individually into the target buffer during transactions. Any raw data in-between these objects is copied as well. However, this raw data copy lacks an out-of-bounds check. If the raw data exceeds the data section size then the copy overwrites the offsets section. This eventually triggers an error that attempts to unwind the processed objects. However, at this point the offsets used to index these objects are now corrupted. Unwinding with corrupted offsets can result in decrements of arbitrary nodes and lead to their premature release. Other users of such nodes are left with a dangling pointer triggering a use-after-free. This issue is made evident by the following KASAN report (trimmed): ================================================================== BUG: KASAN: slab-use-after-free in _raw_spin_lock+0xe4/0x19c Write of size 4 at addr ffff47fc91598f04 by tas",
      "vulnerability_id": "CVE-2024-46740",
      "name": "CVE-2024-46740",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46740.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46740 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: dev/parport: fix the array out-of-bounds risk Fixed array out-of-bounds issues caused by sprintf by replacing it with snprintf for safer data copying, ensuring the destination buffer is not overflowed. Below is the stack trace I encountered during the actual issue: [ 66.575408s] [pid:5118,cpu4,QThread,4]Kernel panic - not syncing: stack-protector: Kernel stack is corrupted in: do_hardware_base_addr+0xcc/0xd0 [parport] [ 66.575408s] [pid:5118,cpu4,QThread,5]CPU: 4 PID: 5118 Comm: QThread Tainted: G S W O 5.10.97-arm64-desktop #7100.57021.2 [ 66.575439s] [pid:5118,cpu4,QThread,6]TGID: 5087 Comm: EFileApp [ 66.575439s] [pid:5118,cpu4,QThread,7]Hardware name: HUAWEI HUAWEI QingYun PGUX-W515x-B081/SP1PANGUXM, BIOS 1.00.07 04/29/2024 [ 66.575439s] [pid:5118,cpu4,QThread,8]Call trace: [ 66.575469s] [pid:5118,cpu4,QThread,9] dump_backtrace+0x0/0x1c0 [ 66.575469s] [pid:5118,cpu4,QThread,0] show_stack+0x14/0x20 [ 66.575469s] [pid:5118,cpu4,QThread,1] d",
      "vulnerability_id": "CVE-2024-42301",
      "name": "CVE-2024-42301",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42301.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42301 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: mISDN: Fix a use after free in hfcmulti_tx() Don't dereference *sp after calling dev_kfree_skb(*sp).",
      "vulnerability_id": "CVE-2024-42280",
      "name": "CVE-2024-42280",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42280.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42280 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: jfs: Fix array-index-out-of-bounds in diFree",
      "vulnerability_id": "CVE-2024-43858",
      "name": "CVE-2024-43858",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-43858.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-43858 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: bpf: Fix DEVMAP_HASH overflow check on 32-bit arches The devmap code allocates a number hash buckets equal to the next power of two of the max_entries value provided when creating the map. When rounding up to the next power of two, the 32-bit variable storing the number of buckets can overflow, and the code checks for overflow by checking if the truncated 32-bit value is equal to 0. However, on 32-bit arches the rounding up itself can overflow mid-way through, because it ends up doing a left-shift of 32 bits on an unsigned long value. If the size of an unsigned long is four bytes, this is undefined behaviour, so there is no guarantee that we'll end up with a nice and tidy 0-value at the end. Syzbot managed to turn this into a crash on arm32 by creating a DEVMAP_HASH with max_entries > 0x80000000 and then trying to update it. Fix this by moving the overflow check to before the rounding up operation.",
      "vulnerability_id": "CVE-2024-26885",
      "name": "CVE-2024-26885",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-26885.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-26885 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: RDMA/iwcm: Fix a use-after-free related to destroying CM IDs iw_conn_req_handler() associates a new struct rdma_id_private (conn_id) with an existing struct iw_cm_id (cm_id) as follows: conn_id->cm_id.iw = cm_id; cm_id->context = conn_id; cm_id->cm_handler = cma_iw_handler; rdma_destroy_id() frees both the cm_id and the struct rdma_id_private. Make sure that cm_work_handler() does not trigger a use-after-free by only freeing of the struct rdma_id_private after all pending work has finished.",
      "vulnerability_id": "CVE-2024-42285",
      "name": "CVE-2024-42285",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42285.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42285 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: drm/amd/display: Check gpio_id before used as array index [WHY & HOW] GPIO_ID_UNKNOWN (-1) is not a valid value for array index and therefore should be checked in advance. This fixes 5 OVERRUN issues reported by Coverity.",
      "vulnerability_id": "CVE-2024-46818",
      "name": "CVE-2024-46818",
      "package_name": "linux",
      "package_details": {
        "file_path": null,
        "name": "linux",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46818.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46818 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    }
  ],
  "linux-libc-dev": [
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: wifi: mac80211: Avoid address calculations via out of bounds array indexing req->n_channels must be set before req->channels[] can be used. This patch fixes one of the issues encountered in [1]. [ 83.964255] UBSAN: array-index-out-of-bounds in net/mac80211/scan.c:364:4 [ 83.964258] index 0 is out of range for type 'struct ieee80211_channel *[]' [...] [ 83.964264] Call Trace: [ 83.964267] <TASK> [ 83.964269] dump_stack_lvl+0x3f/0xc0 [ 83.964274] __ubsan_handle_out_of_bounds+0xec/0x110 [ 83.964278] ieee80211_prep_hw_scan+0x2db/0x4b0 [ 83.964281] __ieee80211_start_scan+0x601/0x990 [ 83.964291] nl80211_trigger_scan+0x874/0x980 [ 83.964295] genl_family_rcv_msg_doit+0xe8/0x160 [ 83.964298] genl_rcv_msg+0x240/0x270 [...] [1] https://bugzilla.kernel.org/show_bug.cgi?id=218810",
      "vulnerability_id": "CVE-2024-41071",
      "name": "CVE-2024-41071",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-41071.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-41071 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: tipc: Return non-zero value from tipc_udp_addr2str() on error tipc_udp_addr2str() should return non-zero value if the UDP media address is invalid. Otherwise, a buffer overflow access can occur in tipc_media_addr_printf(). Fix this by returning 1 on an invalid UDP media address.",
      "vulnerability_id": "CVE-2024-42284",
      "name": "CVE-2024-42284",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42284.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42284 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: hwmon: (nct6775-core) Fix underflows seen when writing limit attributes DIV_ROUND_CLOSEST() after kstrtol() results in an underflow if a large negative number such as -9223372036854775808 is provided by the user. Fix it by reordering clamp_val() and DIV_ROUND_CLOSEST() operations.",
      "vulnerability_id": "CVE-2024-46757",
      "name": "CVE-2024-46757",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46757.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46757 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: hwmon: (adc128d818) Fix underflows seen when writing limit attributes DIV_ROUND_CLOSEST() after kstrtol() results in an underflow if a large negative number such as -9223372036854775808 is provided by the user. Fix it by reordering clamp_val() and DIV_ROUND_CLOSEST() operations.",
      "vulnerability_id": "CVE-2024-46759",
      "name": "CVE-2024-46759",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46759.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46759 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: hwmon: (w83627ehf) Fix underflows seen when writing limit attributes DIV_ROUND_CLOSEST() after kstrtol() results in an underflow if a large negative number such as -9223372036854775808 is provided by the user. Fix it by reordering clamp_val() and DIV_ROUND_CLOSEST() operations.",
      "vulnerability_id": "CVE-2024-46756",
      "name": "CVE-2024-46756",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46756.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46756 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: drm/amdgpu: fix mc_data out-of-bounds read warning Clear warning that read mc_data[i-1] may out-of-bounds.",
      "vulnerability_id": "CVE-2024-46722",
      "name": "CVE-2024-46722",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46722.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46722 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: ila: call nf_unregister_net_hooks() sooner syzbot found an use-after-free Read in ila_nf_input [1] Issue here is that ila_xlat_exit_net() frees the rhashtable, then call nf_unregister_net_hooks(). It should be done in the reverse way, with a synchronize_rcu(). This is a good match for a pre_exit() method. [1] BUG: KASAN: use-after-free in rht_key_hashfn include/linux/rhashtable.h:159 [inline] BUG: KASAN: use-after-free in __rhashtable_lookup include/linux/rhashtable.h:604 [inline] BUG: KASAN: use-after-free in rhashtable_lookup include/linux/rhashtable.h:646 [inline] BUG: KASAN: use-after-free in rhashtable_lookup_fast+0x77a/0x9b0 include/linux/rhashtable.h:672 Read of size 4 at addr ffff888064620008 by task ksoftirqd/0/16 CPU: 0 UID: 0 PID: 16 Comm: ksoftirqd/0 Not tainted 6.11.0-rc4-syzkaller-00238-g2ad6d23f465a #0 Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/06/2024 Call Trace: <TASK> __dump_stack lib/d",
      "vulnerability_id": "CVE-2024-46782",
      "name": "CVE-2024-46782",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46782.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46782 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: drm/amdkfd: don't allow mapping the MMIO HDP page with large pages We don't get the right offset in that case. The GPU has an unused 4K area of the register BAR space into which you can remap registers. We remap the HDP flush registers into this space to allow userspace (CPU or GPU) to flush the HDP when it updates VRAM. However, on systems with >4K pages, we end up exposing PAGE_SIZE of MMIO space.",
      "vulnerability_id": "CVE-2024-41011",
      "name": "CVE-2024-41011",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-41011.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-41011 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: um: line: always fill *error_out in setup_one_line() The pointer isn't initialized by callers, but I have encountered cases where it's still printed; initialize it in all possible cases in setup_one_line().",
      "vulnerability_id": "CVE-2024-46844",
      "name": "CVE-2024-46844",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46844.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46844 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: KVM: PPC: Book3S HV: Prevent UAF in kvm_spapr_tce_attach_iommu_group() Al reported a possible use-after-free (UAF) in kvm_spapr_tce_attach_iommu_group(). It looks up `stt` from tablefd, but then continues to use it after doing fdput() on the returned fd. After the fdput() the tablefd is free to be closed by another thread. The close calls kvm_spapr_tce_release() and then release_spapr_tce_table() (via call_rcu()) which frees `stt`. Although there are calls to rcu_read_lock() in kvm_spapr_tce_attach_iommu_group() they are not sufficient to prevent the UAF, because `stt` is used outside the locked regions. With an artifcial delay after the fdput() and a userspace program which triggers the race, KASAN detects the UAF: BUG: KASAN: slab-use-after-free in kvm_spapr_tce_attach_iommu_group+0x298/0x720 [kvm] Read of size 4 at addr c000200027552c30 by task kvm-vfio/2505 CPU: 54 PID: 2505 Comm: kvm-vfio Not tainted 6.10.0-rc3-next-20240612-dirty #1 Har",
      "vulnerability_id": "CVE-2024-41070",
      "name": "CVE-2024-41070",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-41070.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-41070 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: drm/amdgpu: fix ucode out-of-bounds read warning Clear warning that read ucode[] may out-of-bounds.",
      "vulnerability_id": "CVE-2024-46723",
      "name": "CVE-2024-46723",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46723.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46723 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: of/irq: Prevent device address out-of-bounds read in interrupt map walk When of_irq_parse_raw() is invoked with a device address smaller than the interrupt parent node (from #address-cells property), KASAN detects the following out-of-bounds read when populating the initial match table (dyndbg=\"func of_irq_parse_* +p\"): OF: of_irq_parse_one: dev=/soc@0/picasso/watchdog, index=0 OF: parent=/soc@0/pci@878000000000/gpio0@17,0, intsize=2 OF: intspec=4 OF: of_irq_parse_raw: ipar=/soc@0/pci@878000000000/gpio0@17,0, size=2 OF: -> addrsize=3 ================================================================== BUG: KASAN: slab-out-of-bounds in of_irq_parse_raw+0x2b8/0x8d0 Read of size 4 at addr ffffff81beca5608 by task bash/764 CPU: 1 PID: 764 Comm: bash Tainted: G O 6.1.67-484c613561-nokia_sm_arm64 #1 Hardware name: Unknown Unknown Product/Unknown Product, BIOS 2023.01-12.24.03-dirty 01/01/2023 Call trace: dump_backtrace+0xdc/0x130 show_stack+0x1c/0x30",
      "vulnerability_id": "CVE-2024-46743",
      "name": "CVE-2024-46743",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46743.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46743 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: ipv6: prevent UAF in ip6_send_skb() syzbot reported an UAF in ip6_send_skb() [1] After ip6_local_out() has returned, we no longer can safely dereference rt, unless we hold rcu_read_lock(). A similar issue has been fixed in commit a688caa34beb (\"ipv6: take rcu lock in rawv6_send_hdrinc()\") Another potential issue in ip6_finish_output2() is handled in a separate patch. [1] BUG: KASAN: slab-use-after-free in ip6_send_skb+0x18d/0x230 net/ipv6/ip6_output.c:1964 Read of size 8 at addr ffff88806dde4858 by task syz.1.380/6530 CPU: 1 UID: 0 PID: 6530 Comm: syz.1.380 Not tainted 6.11.0-rc3-syzkaller-00306-gdf6cbc62cc9b #0 Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/06/2024 Call Trace: <TASK> __dump_stack lib/dump_stack.c:93 [inline] dump_stack_lvl+0x241/0x360 lib/dump_stack.c:119 print_address_description mm/kasan/report.c:377 [inline] print_report+0x169/0x550 mm/kasan/report.c:488 kasan_report+0x143/0x180 mm/kasan",
      "vulnerability_id": "CVE-2024-44987",
      "name": "CVE-2024-44987",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-44987.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-44987 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: s390/dasd: fix error recovery leading to data corruption on ESE devices Extent Space Efficient (ESE) or thin provisioned volumes need to be formatted on demand during usual IO processing. The dasd_ese_needs_format function checks for error codes that signal the non existence of a proper track format. The check for incorrect length is to imprecise since other error cases leading to transport of insufficient data also have this flag set. This might lead to data corruption in certain error cases for example during a storage server warmstart. Fix by removing the check for incorrect length and replacing by explicitly checking for invalid track format in transport mode. Also remove the check for file protected since this is not a valid ESE handling case.",
      "vulnerability_id": "CVE-2024-45026",
      "name": "CVE-2024-45026",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-45026.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-45026 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: net/iucv: fix use after free in iucv_sock_close() iucv_sever_path() is called from process context and from bh context. iucv->path is used as indicator whether somebody else is taking care of severing the path (or it is already removed / never existed). This needs to be done with atomic compare and swap, otherwise there is a small window where iucv_sock_close() will try to work with a path that has already been severed and freed by iucv_callback_connrej() called by iucv_tasklet_fn(). Example: [452744.123844] Call Trace: [452744.123845] ([<0000001e87f03880>] 0x1e87f03880) [452744.123966] [<00000000d593001e>] iucv_path_sever+0x96/0x138 [452744.124330] [<000003ff801ddbca>] iucv_sever_path+0xc2/0xd0 [af_iucv] [452744.124336] [<000003ff801e01b6>] iucv_sock_close+0xa6/0x310 [af_iucv] [452744.124341] [<000003ff801e08cc>] iucv_sock_release+0x3c/0xd0 [af_iucv] [452744.124345] [<00000000d574794e>] __sock_release+0x5e/0xe8 [452744.124815] [<00000000d574",
      "vulnerability_id": "CVE-2024-42271",
      "name": "CVE-2024-42271",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42271.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42271 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: hwmon: (lm95234) Fix underflows seen when writing limit attributes DIV_ROUND_CLOSEST() after kstrtol() results in an underflow if a large negative number such as -9223372036854775808 is provided by the user. Fix it by reordering clamp_val() and DIV_ROUND_CLOSEST() operations.",
      "vulnerability_id": "CVE-2024-46758",
      "name": "CVE-2024-46758",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46758.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46758 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: sch/netem: fix use after free in netem_dequeue If netem_dequeue() enqueues packet to inner qdisc and that qdisc returns __NET_XMIT_STOLEN. The packet is dropped but qdisc_tree_reduce_backlog() is not called to update the parent's q.qlen, leading to the similar use-after-free as Commit e04991a48dbaf382 (\"netem: fix return value if duplicate enqueue fails\") Commands to trigger KASAN UaF: ip link add type dummy ip link set lo up ip link set dummy0 up tc qdisc add dev lo parent root handle 1: drr tc filter add dev lo parent 1: basic classid 1:1 tc class add dev lo classid 1:1 drr tc qdisc add dev lo parent 1:1 handle 2: netem tc qdisc add dev lo parent 2: handle 3: drr tc filter add dev lo parent 3: basic classid 3:1 action mirred egress redirect dev dummy0 tc class add dev lo classid 3:1 drr ping -c1 -W0.01 localhost # Trigger bug tc class del dev lo classid 1:1 tc class add dev lo classid 1:1 drr ping -c1 -W0.01 localhost # UaF",
      "vulnerability_id": "CVE-2024-46800",
      "name": "CVE-2024-46800",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46800.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46800 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: gtp: pull network headers in gtp_dev_xmit() syzbot/KMSAN reported use of uninit-value in get_dev_xmit() [1] We must make sure the IPv4 or Ipv6 header is pulled in skb->head before accessing fields in them. Use pskb_inet_may_pull() to fix this issue. [1] BUG: KMSAN: uninit-value in ipv6_pdp_find drivers/net/gtp.c:220 [inline] BUG: KMSAN: uninit-value in gtp_build_skb_ip6 drivers/net/gtp.c:1229 [inline] BUG: KMSAN: uninit-value in gtp_dev_xmit+0x1424/0x2540 drivers/net/gtp.c:1281 ipv6_pdp_find drivers/net/gtp.c:220 [inline] gtp_build_skb_ip6 drivers/net/gtp.c:1229 [inline] gtp_dev_xmit+0x1424/0x2540 drivers/net/gtp.c:1281 __netdev_start_xmit include/linux/netdevice.h:4913 [inline] netdev_start_xmit include/linux/netdevice.h:4922 [inline] xmit_one net/core/dev.c:3580 [inline] dev_hard_start_xmit+0x247/0xa20 net/core/dev.c:3596 __dev_queue_xmit+0x358c/0x5610 net/core/dev.c:4423 dev_queue_xmit include/linux/netdevice.h:3105 [inline] packet_xmit+0x",
      "vulnerability_id": "CVE-2024-44999",
      "name": "CVE-2024-44999",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-44999.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-44999 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: scsi: aacraid: Fix double-free on probe failure aac_probe_one() calls hardware-specific init functions through the aac_driver_ident::init pointer, all of which eventually call down to aac_init_adapter(). If aac_init_adapter() fails after allocating memory for aac_dev::queues, it frees the memory but does not clear that member. After the hardware-specific init function returns an error, aac_probe_one() goes down an error path that frees the memory pointed to by aac_dev::queues, resulting.in a double-free.",
      "vulnerability_id": "CVE-2024-46673",
      "name": "CVE-2024-46673",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46673.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46673 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: HID: cougar: fix slab-out-of-bounds Read in cougar_report_fixup report_fixup for the Cougar 500k Gaming Keyboard was not verifying that the report descriptor size was correct before accessing it",
      "vulnerability_id": "CVE-2024-46747",
      "name": "CVE-2024-46747",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.1,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.1,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46747.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46747 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: ASoC: dapm: Fix UAF for snd_soc_pcm_runtime object When using kernel with the following extra config, - CONFIG_KASAN=y - CONFIG_KASAN_GENERIC=y - CONFIG_KASAN_INLINE=y - CONFIG_KASAN_VMALLOC=y - CONFIG_FRAME_WARN=4096 kernel detects that snd_pcm_suspend_all() access a freed 'snd_soc_pcm_runtime' object when the system is suspended, which leads to a use-after-free bug: [ 52.047746] BUG: KASAN: use-after-free in snd_pcm_suspend_all+0x1a8/0x270 [ 52.047765] Read of size 1 at addr ffff0000b9434d50 by task systemd-sleep/2330 [ 52.047785] Call trace: [ 52.047787] dump_backtrace+0x0/0x3c0 [ 52.047794] show_stack+0x34/0x50 [ 52.047797] dump_stack_lvl+0x68/0x8c [ 52.047802] print_address_description.constprop.0+0x74/0x2c0 [ 52.047809] kasan_report+0x210/0x230 [ 52.047815] __asan_report_load1_noabort+0x3c/0x50 [ 52.047820] snd_pcm_suspend_all+0x1a8/0x270 [ 52.047824] snd_soc_suspend+0x19c/0x4e0 The snd_pcm_sync_stop() has a NULL check on 'substream->ru",
      "vulnerability_id": "CVE-2024-46798",
      "name": "CVE-2024-46798",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46798.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46798 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: atm: idt77252: prevent use after free in dequeue_rx() We can't dereference \"skb\" after calling vcc->push() because the skb is released.",
      "vulnerability_id": "CVE-2024-44998",
      "name": "CVE-2024-44998",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-44998.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-44998 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: Squashfs: sanity check symbolic link size Syzkiller reports a \"KMSAN: uninit-value in pick_link\" bug. This is caused by an uninitialised page, which is ultimately caused by a corrupted symbolic link size read from disk. The reason why the corrupted symlink size causes an uninitialised page is due to the following sequence of events: 1. squashfs_read_inode() is called to read the symbolic link from disk. This assigns the corrupted value 3875536935 to inode->i_size. 2. Later squashfs_symlink_read_folio() is called, which assigns this corrupted value to the length variable, which being a signed int, overflows producing a negative number. 3. The following loop that fills in the page contents checks that the copied bytes is less than length, which being negative means the loop is skipped, producing an uninitialised page. This patch adds a sanity check which checks that the symbolic link size is not larger than expected. -- V2: fix spelling mistake",
      "vulnerability_id": "CVE-2024-46744",
      "name": "CVE-2024-46744",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46744.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46744 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: VMCI: Fix use-after-free when removing resource in vmci_resource_remove() When removing a resource from vmci_resource_table in vmci_resource_remove(), the search is performed using the resource handle by comparing context and resource fields. It is possible though to create two resources with different types but same handle (same context and resource fields). When trying to remove one of the resources, vmci_resource_remove() may not remove the intended one, but the object will still be freed as in the case of the datagram type in vmci_datagram_destroy_handle(). vmci_resource_table will still hold a pointer to this freed resource leading to a use-after-free vulnerability. BUG: KASAN: use-after-free in vmci_handle_is_equal include/linux/vmw_vmci_defs.h:142 [inline] BUG: KASAN: use-after-free in vmci_resource_remove+0x3a1/0x410 drivers/misc/vmw_vmci/vmci_resource.c:147 Read of size 4 at addr ffff88801c16d800 by task syz-executor197/1592 Call Tra",
      "vulnerability_id": "CVE-2024-46738",
      "name": "CVE-2024-46738",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46738.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46738 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: nvme: avoid double free special payload If a discard request needs to be retried, and that retry may fail before a new special payload is added, a double free will result. Clear the RQF_SPECIAL_LOAD when the request is cleaned.",
      "vulnerability_id": "CVE-2024-41073",
      "name": "CVE-2024-41073",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-41073.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-41073 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: media: venus: fix use after free in vdec_close There appears to be a possible use after free with vdec_close(). The firmware will add buffer release work to the work queue through HFI callbacks as a normal part of decoding. Randomly closing the decoder device from userspace during normal decoding can incur a read after free for inst. Fix it by cancelling the work in vdec_close.",
      "vulnerability_id": "CVE-2024-42313",
      "name": "CVE-2024-42313",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42313.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42313 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: binder: fix UAF caused by offsets overwrite Binder objects are processed and copied individually into the target buffer during transactions. Any raw data in-between these objects is copied as well. However, this raw data copy lacks an out-of-bounds check. If the raw data exceeds the data section size then the copy overwrites the offsets section. This eventually triggers an error that attempts to unwind the processed objects. However, at this point the offsets used to index these objects are now corrupted. Unwinding with corrupted offsets can result in decrements of arbitrary nodes and lead to their premature release. Other users of such nodes are left with a dangling pointer triggering a use-after-free. This issue is made evident by the following KASAN report (trimmed): ================================================================== BUG: KASAN: slab-use-after-free in _raw_spin_lock+0xe4/0x19c Write of size 4 at addr ffff47fc91598f04 by tas",
      "vulnerability_id": "CVE-2024-46740",
      "name": "CVE-2024-46740",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46740.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46740 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: dev/parport: fix the array out-of-bounds risk Fixed array out-of-bounds issues caused by sprintf by replacing it with snprintf for safer data copying, ensuring the destination buffer is not overflowed. Below is the stack trace I encountered during the actual issue: [ 66.575408s] [pid:5118,cpu4,QThread,4]Kernel panic - not syncing: stack-protector: Kernel stack is corrupted in: do_hardware_base_addr+0xcc/0xd0 [parport] [ 66.575408s] [pid:5118,cpu4,QThread,5]CPU: 4 PID: 5118 Comm: QThread Tainted: G S W O 5.10.97-arm64-desktop #7100.57021.2 [ 66.575439s] [pid:5118,cpu4,QThread,6]TGID: 5087 Comm: EFileApp [ 66.575439s] [pid:5118,cpu4,QThread,7]Hardware name: HUAWEI HUAWEI QingYun PGUX-W515x-B081/SP1PANGUXM, BIOS 1.00.07 04/29/2024 [ 66.575439s] [pid:5118,cpu4,QThread,8]Call trace: [ 66.575469s] [pid:5118,cpu4,QThread,9] dump_backtrace+0x0/0x1c0 [ 66.575469s] [pid:5118,cpu4,QThread,0] show_stack+0x14/0x20 [ 66.575469s] [pid:5118,cpu4,QThread,1] d",
      "vulnerability_id": "CVE-2024-42301",
      "name": "CVE-2024-42301",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42301.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42301 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: mISDN: Fix a use after free in hfcmulti_tx() Don't dereference *sp after calling dev_kfree_skb(*sp).",
      "vulnerability_id": "CVE-2024-42280",
      "name": "CVE-2024-42280",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42280.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42280 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: jfs: Fix array-index-out-of-bounds in diFree",
      "vulnerability_id": "CVE-2024-43858",
      "name": "CVE-2024-43858",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-43858.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-43858 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: bpf: Fix DEVMAP_HASH overflow check on 32-bit arches The devmap code allocates a number hash buckets equal to the next power of two of the max_entries value provided when creating the map. When rounding up to the next power of two, the 32-bit variable storing the number of buckets can overflow, and the code checks for overflow by checking if the truncated 32-bit value is equal to 0. However, on 32-bit arches the rounding up itself can overflow mid-way through, because it ends up doing a left-shift of 32 bits on an unsigned long value. If the size of an unsigned long is four bytes, this is undefined behaviour, so there is no guarantee that we'll end up with a nice and tidy 0-value at the end. Syzbot managed to turn this into a crash on arm32 by creating a DEVMAP_HASH with max_entries > 0x80000000 and then trying to update it. Fix this by moving the overflow check to before the rounding up operation.",
      "vulnerability_id": "CVE-2024-26885",
      "name": "CVE-2024-26885",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-26885.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-26885 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: RDMA/iwcm: Fix a use-after-free related to destroying CM IDs iw_conn_req_handler() associates a new struct rdma_id_private (conn_id) with an existing struct iw_cm_id (cm_id) as follows: conn_id->cm_id.iw = cm_id; cm_id->context = conn_id; cm_id->cm_handler = cma_iw_handler; rdma_destroy_id() frees both the cm_id and the struct rdma_id_private. Make sure that cm_work_handler() does not trigger a use-after-free by only freeing of the struct rdma_id_private after all pending work has finished.",
      "vulnerability_id": "CVE-2024-42285",
      "name": "CVE-2024-42285",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-42285.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-42285 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    },
    {
      "description": "In the Linux kernel, the following vulnerability has been resolved: drm/amd/display: Check gpio_id before used as array index [WHY & HOW] GPIO_ID_UNKNOWN (-1) is not a valid value for array index and therefore should be checked in advance. This fixes 5 OVERRUN issues reported by Coverity.",
      "vulnerability_id": "CVE-2024-46818",
      "name": "CVE-2024-46818",
      "package_name": "linux-libc-dev",
      "package_details": {
        "file_path": null,
        "name": "linux-libc-dev",
        "package_manager": "OS",
        "version": "5.4.0",
        "release": "198.218"
      },
      "remediation": { "recommendation": { "text": "None Provided" } },
      "cvss_v3_score": 7.8,
      "cvss_v30_score": 0.0,
      "cvss_v31_score": 7.8,
      "cvss_v2_score": 0.0,
      "cvss_v3_severity": "HIGH",
      "source_url": "https://people.canonical.com/~ubuntu-security/cve/2024/CVE-2024-46818.html",
      "source": "UBUNTU_CVE",
      "severity": "HIGH",
      "status": "ACTIVE",
      "title": "CVE-2024-46818 - linux-libc-dev, linux",
      "reason_to_ignore": "N/A"
    }
  ]
}
