# Expecting base image to be the image built by ./Dockerfile.e3.gpu
ARG BASE_IMAGE=""

FROM $BASE_IMAGE

LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"

ENV SAGEMAKER_TRAINING_MODULE sagemaker_tensorflow_container.training:main

ARG PYTHON=python3.8
ARG PIP=pip3
ARG PYTHON_VERSION=3.8.2

# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating
# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.
ARG SMDEBUG_VERSION=1.0.12

ARG SMDATAPARALLEL_BINARY=https://smdataparallel.s3.amazonaws.com/binary/tensorflow/2.7.0/cu112/2021-11-12/smdistributed_dataparallel-1.3.0-cp38-cp38-linux_x86_64.whl

ARG SMMODELPARALLEL_BINARY=https://sagemaker-distributed-model-parallel.s3.us-west-2.amazonaws.com/tensorflow-2.6.0/build-artifacts/2021-08-24-22-08/smdistributed_modelparallel-1.4.0-cp38-cp38-linux_x86_64.whl

RUN wget https://sourceforge.net/projects/boost/files/boost/1.73.0/boost_1_73_0.tar.gz/download -O boost_1_73_0.tar.gz \
   && tar -xzf boost_1_73_0.tar.gz \
   && cd boost_1_73_0 \
   && ./bootstrap.sh \
   && ./b2 threading=multi --prefix=/usr -j 64 cxxflags=-fPIC cflags=-fPIC install || true \
   && cd .. \
   && rm -rf boost_1_73_0.tar.gz \
   && rm -rf boost_1_73_0 \
   && cd /usr/include/boost

WORKDIR /

RUN ${PIP} install --no-cache-dir -U \
  scikit-learn==0.24.2 \
  pandas==1.2.5 \
  "sagemaker>=2,<3" \
  sagemaker-experiments==0.* \
  "sagemaker-tensorflow>=2.6,<2.7" \
  "sagemaker-tensorflow-training>=20" \
  smdebug==${SMDEBUG_VERSION} \
  smclarify

# Install extra packages
RUN ${PIP} install --no-cache-dir -U \
    "bokeh>=2.3,<2.4" \
    "imageio>=2.9,<3" \
    "opencv-python>=4.3,<5" \
    "plotly>=5.1,<6" \
    "seaborn>=0.11,<1" \
    "shap>=0.39,<1"

ARG METIS=metis-5.1.0
ARG RMM_VERSION=0.15.0

# install metis
RUN wget -nv http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/${METIS}.tar.gz \
  && gunzip -f ${METIS}.tar.gz \
  && tar -xvf ${METIS}.tar \
  && cd ${METIS} \
  && apt-get update \
  && apt-get install -y build-essential \
  && apt-get install -y cmake \
  && make config shared=1 \
  && make install \
  && cd .. \
  && rm -rf ${METIS}.tar* \
  && rm -rf ${METIS} \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get clean

# Install RAPIDSMemoryManager.
# Requires cmake>=3.14.
RUN  wget -nv https://github.com/rapidsai/rmm/archive/v${RMM_VERSION}.tar.gz \
  && tar -xvf v${RMM_VERSION}.tar.gz \
  && cd rmm-${RMM_VERSION} \
  && INSTALL_PREFIX=/usr/local ./build.sh librmm \
  && cd .. \
  && rm -rf v${RMM_VERSION}.tar* \
  && rm -rf rmm-${RMM_VERSION}

# Install SMD MP binary
RUN pip install --no-cache-dir -U ${SMMODELPARALLEL_BINARY}

# Install SMD DP binary
RUN SMDATAPARALLEL_TF=1 ${PIP} install --no-cache-dir ${SMDATAPARALLEL_BINARY}

RUN HOME_DIR=/root \
   && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
   && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
   && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
   && chmod +x /usr/local/bin/testOSSCompliance \
   && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
   && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
   && rm -rf ${HOME_DIR}/oss_compliance*

CMD ["/bin/bash"]
