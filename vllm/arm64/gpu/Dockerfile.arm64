ARG CUDA_VERSION=12.8.1
ARG PYTHON_VERSION=3.12

ARG BUILD_BASE_IMAGE=nvidia/cuda:${CUDA_VERSION}-devel-ubuntu20.04
ARG FINAL_BASE_IMAGE=nvidia/cuda:${CUDA_VERSION}-devel-ubuntu22.04

#################### BASE BUILD IMAGE ####################
FROM ${BUILD_BASE_IMAGE} AS base
ARG CUDA_VERSION
ARG PYTHON_VERSION
ENV DEBIAN_FRONTEND=noninteractive

# Install Python and other dependencies
RUN apt-get update -y \
    && apt-get install -y ccache software-properties-common git curl sudo \
    && add-apt-repository -y ppa:deadsnakes/ppa \
    && apt-get update -y \
    && apt-get install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-dev python${PYTHON_VERSION}-venv \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1 \
    && update-alternatives --set python3 /usr/bin/python${PYTHON_VERSION} \
    && ln -sf /usr/bin/python${PYTHON_VERSION}-config /usr/bin/python3-config \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python${PYTHON_VERSION} \
    && ldconfig /usr/local/cuda-$(echo $CUDA_VERSION | cut -d. -f1,2)/compat/ \
    && python3 --version && python3 -m pip --version

WORKDIR /workspace

#################### Build IMAGE ####################
FROM base AS build

# Build essential components
RUN mkdir wheels

# Build xFormers
RUN git clone https://github.com/facebookresearch/xformers.git \
    && cd xformers \
    && git checkout v0.0.28.post3 \
    && git submodule update --init --recursive \
    && python setup.py bdist_wheel --dist-dir=/workspace/wheels

# Build Flashinfer
RUN git clone https://github.com/flashinfer-ai/flashinfer.git \
    && cd flashinfer \
    && git checkout v0.2.0.post2 \
    && git submodule update --init --recursive \
    && cd python \
    && FLASHINFER_ENABLE_AOT=1 python setup.py bdist_wheel --dist-dir=/workspace/wheels

# Build Bitsandbytes
RUN git clone https://github.com/bitsandbytes-foundation/bitsandbytes.git \
    && cd bitsandbytes \
    && git checkout 0.45 \
    && cmake -DCOMPUTE_BACKEND=cuda -S . \
    && make \
    && python setup.py bdist_wheel --dist-dir=/workspace/wheels

# Install built wheels
RUN pip install --no-deps /workspace/wheels/*.whl

WORKDIR /workspace/vllm

ARG VLLM_VERSION="v0.10.1.1"
ARG max_jobs=20
ENV MAX_JOBS=${max_jobs}

ARG nvcc_threads=10
ENV NVCC_THREADS=$nvcc_threads

ARG torch_cuda_arch_list='7.5'
ENV TORCH_CUDA_ARCH_LIST=${torch_cuda_arch_list}

RUN python3 -m pip install -r https://raw.githubusercontent.com/vllm-project/vllm/${VLLM_VERSION}/requirements/build.txt \
    --extra-index-url https://download.pytorch.org/whl/cu$(echo $CUDA_VERSION | cut -d. -f1,2 | tr -d '.') \
    && mkdir -p /workspace/dist \
    && git clone https://github.com/vllm-project/vllm.git . \
    && git checkout ${VLLM_VERSION} \
    && python3 use_existing_torch.py 

ARG vllm_target_device="cuda"
ENV VLLM_TARGET_DEVICE=${vllm_target_device}
RUN rm -rf .deps && \
    mkdir -p .deps && \
    python3 setup.py bdist_wheel --dist-dir=/workspace/dist --py-limited-api=cp38

#################### vLLM installation IMAGE ####################
FROM ${FINAL_BASE_IMAGE} AS vllm-base
ARG CUDA_VERSION
ARG PYTHON_VERSION
ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /vllm-workspace

RUN PYTHON_VERSION_STR=$(echo ${PYTHON_VERSION} | sed 's/\.//g') && \
    echo "export PYTHON_VERSION_STR=${PYTHON_VERSION_STR}" >> /etc/environment

# Install Python and other dependencies
RUN apt-get update -y \
    && apt-get install -y ccache software-properties-common git curl wget sudo vim python3-pip \
    && apt-get install -y ffmpeg libsm6 libxext6 libgl1 \
    && add-apt-repository -y ppa:deadsnakes/ppa \
    && apt-get update -y \
    && apt-get install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-dev python${PYTHON_VERSION}-venv libibverbs-dev \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1 \
    && update-alternatives --set python3 /usr/bin/python${PYTHON_VERSION} \
    && ln -sf /usr/bin/python${PYTHON_VERSION}-config /usr/bin/python3-config \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python${PYTHON_VERSION} \
    && ldconfig /usr/local/cuda-$(echo $CUDA_VERSION | cut -d. -f1,2)/compat/

RUN python3 -m pip install -r https://raw.githubusercontent.com/vllm-project/vllm/v0.10.1.1/requirements/build.txt \
    --extra-index-url https://download.pytorch.org/whl/cu$(echo $CUDA_VERSION | cut -d. -f1,2 | tr -d '.')

# Install vllm wheel
COPY --from=build /workspace/dist /vllm-workspace/dist
COPY --from=build /workspace/wheels /vllm-workspace/wheels

RUN python3 -m pip install /vllm-workspace/wheels/*.whl \
    && python3 -m pip install /vllm-workspace/dist/*.whl --verbose \
    --extra-index-url https://download.pytorch.org/whl/cu$(echo $CUDA_VERSION | cut -d. -f1,2 | tr -d '.')

#################### OPENAI API SERVER ####################
FROM vllm-base AS vllm-openai-base

# install additional dependencies for openai api server
RUN python3 -m pip install accelerate hf_transfer modelscope "bitsandbytes>=0.42.0" 'timm==0.9.10' boto3 runai-model-streamer runai-model-streamer[s3]

ENV VLLM_USAGE_SOURCE production-docker-image

FROM vllm-openai-base AS final
LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"
ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    DLC_CONTAINER_TYPE=base \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=UTF-8 \
    LD_LIBRARY_PATH="/usr/local/lib:/opt/amazon/ofi-nccl/lib/aarch64-linux-gnu:/opt/amazon/openmpi/lib:/opt/amazon/efa/lib:/usr/local/cuda/lib64:${LD_LIBRARY_PATH}" \
    PATH="/opt/amazon/openmpi/bin:/opt/amazon/efa/bin:/usr/local/cuda/bin:${PATH}"

COPY deep_learning_container.py /usr/local/bin/deep_learning_container.py
COPY bash_telemetry.sh /usr/local/bin/bash_telemetry.sh
COPY dockerd_entrypoint.sh /usr/local/bin/dockerd_entrypoint.sh

WORKDIR /

RUN chmod +x /usr/local/bin/deep_learning_container.py && \
    chmod +x /usr/local/bin/bash_telemetry.sh && \
    chmod +x /usr/local/bin/dockerd_entrypoint.sh && \
    echo 'source /usr/local/bin/bash_telemetry.sh' >> /etc/bash.bashrc 

RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --allow-change-held-packages --no-install-recommends unzip && \
    apt-get clean && \
    HOME_DIR=/root && \
    curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip && \
    unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ && \
    cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance && \
    chmod +x /usr/local/bin/testOSSCompliance && \
    chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh && \
    ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python3 && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    rm -rf ${HOME_DIR}/oss_compliance* && \
    rm -rf /tmp/tmp* && \
    rm -rf /tmp/uv* && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /root/.cache | true

RUN mkdir -p /tmp/nvjpeg && \
    cd /tmp/nvjpeg && \
    wget https://developer.download.nvidia.com/compute/cuda/redist/libnvjpeg/linux-aarch64/libnvjpeg-linux-aarch64-12.4.0.76-archive.tar.xz && \
    tar -xvf libnvjpeg-linux-aarch64-12.4.0.76-archive.tar.xz && \
    rm -rf /usr/local/cuda/targets/sbsa-linux/lib/libnvjpeg* && \
    rm -rf /usr/local/cuda/targets/sbsa-linux/include/nvjpeg.h && \
    cp libnvjpeg-linux-aarch64-12.4.0.76-archive/lib/libnvjpeg* /usr/local/cuda/targets/sbsa-linux/lib/ && \
    cp libnvjpeg-linux-aarch64-12.4.0.76-archive/include/* /usr/local/cuda/targets/sbsa-linux/include/ && \
    rm -rf /tmp/nvjpeg && \
    rm -rf /usr/local/cuda/bin/cuobjdump* && \
    rm -rf /usr/local/cuda/bin/nvdisasm*

ENTRYPOINT ["/usr/local/bin/dockerd_entrypoint.sh"]