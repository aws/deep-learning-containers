version: 0.2

env:
  variables:
    FRAMEWORK_VERSION: '1.6.0'
    CPU_PY_VERSION: '2'
    CPU_INSTANCE_TYPE: 'ml.c4.xlarge'
    GPU_PY_VERSION: '3'
    GPU_INSTANCE_TYPE: 'ml.p2.xlarge'
    ECR_REPO: 'sagemaker-test'
    GITHUB_REPO: 'sagemaker-mxnet-container'
    SETUP_FILE: 'setup_cmds.sh'
    SETUP_CMDS: '#!/bin/bash\npip install --upgrade pip\npip install -U -e .\npip install -U -e .[test]'

phases:
  pre_build:
    commands:
      - start-dockerd
      - ACCOUNT=$(aws --region $AWS_DEFAULT_REGION sts --endpoint-url https://sts.$AWS_DEFAULT_REGION.amazonaws.com get-caller-identity --query 'Account' --output text)
      - PREPROD_IMAGE="$ACCOUNT.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO"
      - PR_NUM=$(echo $CODEBUILD_SOURCE_VERSION | grep -o '[0-9]\+')
      - echo 'Pull request number:' $PR_NUM '. No value means this build is not from pull request.'

  build:
    commands:
      # install
      - pip3 install -U -e .
      - pip3 install -U -e .[test]

      # run linter
      - tox -e flake8

      # run unit tests
      - pytest test/unit

      # Create pip archive in dist/
      # tar_name will be something like: sagemaker_mxnet_container-3.0.0.tar.gz
      - python3 setup.py sdist
      - tar_name=$(ls dist/sagemaker_mxnet_container*.tar.gz)
      - framework_dir="docker/$FRAMEWORK_VERSION"
      - cpu_dir=$framework_dir/py$CPU_PY_VERSION
      - gpu_dir=$framework_dir/py$GPU_PY_VERSION
      - cp $tar_name $cpu_dir/sagemaker_mxnet_container.tar.gz
      - cp $tar_name $gpu_dir/sagemaker_mxnet_container.tar.gz
      - cp -r docker/artifacts/* $cpu_dir
      - cp -r docker/artifacts/* $gpu_dir

      - build_id="$(echo $CODEBUILD_BUILD_ID | sed -e 's/:/-/g')"
      - prev_dir=$(pwd)

      # build cpu image
      - cd $cpu_dir
      - cpu_dockerfile="Dockerfile.cpu"
      - CPU_TAG="$FRAMEWORK_VERSION-cpu-py$CPU_PY_VERSION-$build_id"

      - docker build -f $cpu_dockerfile -t $PREPROD_IMAGE:$CPU_TAG .
      - cd $prev_dir

      # build gpu image
      - cd $gpu_dir
      - gpu_dockerfile="Dockerfile.gpu"
      - GPU_TAG="$FRAMEWORK_VERSION-gpu-py$GPU_PY_VERSION-$build_id"

      - docker build -f $gpu_dockerfile -t $PREPROD_IMAGE:$GPU_TAG .
      - cd $prev_dir

      # push images to ecr
      - $(aws ecr get-login --registry-ids $ACCOUNT --no-include-email --region $AWS_DEFAULT_REGION)
      - docker push $PREPROD_IMAGE:$CPU_TAG
      - docker push $PREPROD_IMAGE:$GPU_TAG

      # launch remote gpu instance
      - prefix='ml.'
      - instance_type=${GPU_INSTANCE_TYPE#"$prefix"}
      - create-key-pair
      - launch-ec2-instance --instance-type $instance_type --ami-name dlami-ubuntu

      # run cpu integration tests
      - test_cmd="pytest test/integration/local --region $AWS_DEFAULT_REGION --docker-base-name $PREPROD_IMAGE --tag $CPU_TAG --framework-version $FRAMEWORK_VERSION --py-version $CPU_PY_VERSION --processor cpu"
      - execute-command-if-has-matching-changes "$test_cmd" "test/" "src/*.py" "setup.py" "setup.cfg" "docker/*" "buildspec.yml"

      # run gpu integration tests
      - printf "$SETUP_CMDS" > $SETUP_FILE
      - pytest_cmd="pytest test/integration/local --region $AWS_DEFAULT_REGION --docker-base-name $PREPROD_IMAGE --tag $GPU_TAG --framework-version $FRAMEWORK_VERSION --py-version $GPU_PY_VERSION --processor gpu"
      - test_cmd="remote-test --github-repo $GITHUB_REPO --test-cmd \"$pytest_cmd\" --setup-file $SETUP_FILE --pr-number \"$PR_NUM\""
      - execute-command-if-has-matching-changes "$test_cmd" "test/" "src/*.py" "setup.py" "setup.cfg" "docker/*" "buildspec.yml"

      # run cpu sagemaker tests
      - test_cmd="pytest test/integration/sagemaker --region $AWS_DEFAULT_REGION --docker-base-name $ECR_REPO --aws-id $ACCOUNT --tag $CPU_TAG --instance-type $CPU_INSTANCE_TYPE"
      - execute-command-if-has-matching-changes "$test_cmd" "test/" "src/*.py" "setup.py" "setup.cfg" "docker/*" "buildspec.yml"

      # run gpu sagemaker tests
      - test_cmd="pytest test/integration/sagemaker --region $AWS_DEFAULT_REGION --docker-base-name $ECR_REPO --aws-id $ACCOUNT --tag $GPU_TAG --instance-type $GPU_INSTANCE_TYPE"
      - execute-command-if-has-matching-changes "$test_cmd" "test/" "src/*.py" "setup.py" "setup.cfg" "docker/*" "buildspec.yml"

    finally:
      # shut down remote gpu instance
      - cleanup-gpu-instances
      - cleanup-key-pairs

      # remove ecr image
      - aws ecr batch-delete-image --repository-name $ECR_REPO --region $AWS_DEFAULT_REGION --image-ids imageTag=$CPU_TAG
      - aws ecr batch-delete-image --repository-name $ECR_REPO --region $AWS_DEFAULT_REGION --image-ids imageTag=$GPU_TAG
