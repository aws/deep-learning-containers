# Note: We do not need install nccl or cudnn, which were already installed in runtime container.
# cuda-libraries and cu-blas is already installed in runtime container
# The tag for this base image is: nvidia/cuda:10.1-cudnn7-runtime-ubuntu16.04
FROM nvidia/cuda@sha256:b98156ec626001de2168e28a667d044e1d642ce2db7fad25e89a81977f862267

LABEL maintainer="Amazon AI"

# See http://bugs.python.org/issue19846
ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib" \
    PYTHONIOENCODING=UTF-8 \
    SAGEMAKER_TRAINING_MODULE=sagemaker_mxnet_container.training:main

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    # build-essential needed to pip install sagemaker_mxnet_container
    build-essential \
    ca-certificates \
    cuda-command-line-tools-10-1 \
    cuda-cufft-10-1 \
    cuda-curand-10-1 \
    cuda-cusolver-10-1 \
    cuda-cusparse-10-1 \
    curl \
    git \
    libgomp1 \
    libopencv-dev \
    python \
    # python-dev needed to pip install mxnet and sagemaker_mxnet_container
    python-dev \
    python-pip \
    vim \
    wget \
    # zlib1g-dev needed to pip install sagemaker_mxnet_container
    zlib1g-dev \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/* \
 && ln -s $(which python) /usr/local/bin/python

WORKDIR /

# All the needed artifacts should be setup before docker build command.
COPY sagemaker_mxnet_container.tar.gz /sagemaker_mxnet_container.tar.gz
COPY requirements.txt requirements.txt

RUN pip install --no-cache --upgrade \
    pip==19.3.1 \
    setuptools

# python-dateutil==2.8.0 to satisfy botocore
RUN pip install --no-cache-dir --upgrade -r requirements.txt \
 && rm /sagemaker_mxnet_container.tar.gz \
    requirements.txt

# "channels first" is recommended for keras-mxnet
# https://github.com/awslabs/keras-apache-mxnet/blob/master/docs/mxnet_backend/performance_guide.md#channels-first-image-data-format-for-cnn
RUN mkdir /root/.keras \
 && echo '{"image_data_format": "channels_first"}' > /root/.keras/keras.json

# This is here to make our installed version of OpenCV work.
# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394
# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?
RUN ln -s /dev/null /dev/raw1394

COPY dockerd-entrypoint.py /usr/local/bin/dockerd-entrypoint.py
COPY deep_learning_container.py /usr/local/bin/deep_learning_container.py

RUN chmod +x /usr/local/bin/dockerd-entrypoint.py \
 && chmod +x /usr/local/bin/deep_learning_container.py

RUN curl -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/mxnet/license.txt

ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
CMD ["/bin/bash"]
