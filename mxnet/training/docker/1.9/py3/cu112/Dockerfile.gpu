# Note: We need to install NCCL, cuDNN, and CUDA libraries since we are using base container.
FROM nvidia/cuda:11.2.2-base-ubuntu20.04

LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"

ARG MX_URL=https://aws-mx-pypi.s3.us-west-2.amazonaws.com/1.9.0/aws_mx_cu112-1.9.0.131-py3-none-manylinux2014_x86_64.whl

# The smdebug pipeline relies for following format to perform string replace and trigger DLC pipeline for validating
# the nightly builds. Therefore, while updating the smdebug version, please ensure that the format is not disturbed.
ARG SMDEBUG_VERSION=1.0.9

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib" \
    PYTHONIOENCODING=UTF-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    SAGEMAKER_TRAINING_MODULE=sagemaker_mxnet_container.training:main \
    DGLBACKEND=mxnet \
    CUDNN_VERSION=8.1.1.33-1+cuda11.2 \
    NCCL_VERSION=2.8.3-1+cuda11.2 \
    DEBIAN_FRONTEND=noninteractive

RUN apt-get update \
 && apt-get -y upgrade --only-upgrade systemd \
 && apt-get install -y --no-install-recommends \
    # from sources.list
    software-properties-common \
    build-essential \
    ca-certificates \
    curl \
    emacs \
    git \
    vim \
    wget \
    unzip \
    libatlas-base-dev \
    libcurl4-openssl-dev \
    libgomp1 \
    libopencv-dev \
    openssh-client \
    openssh-server \
    zlib1g-dev \
    libreadline-gplv2-dev \
    libncursesw5-dev \
    libssl-dev \
    libsqlite3-dev \
    libgdbm-dev \
    libc6-dev \
    libbz2-dev \
    tk-dev \
    libffi-dev \
    cmake \
    libgtk2.0-dev \
    # from sources.list.d/cuda.list
    libcudnn8=${CUDNN_VERSION} \
    libcufft-11-2 \
    libcusparse-11-2 \
    libcublas-11-2 \
    libcublas-dev-11-2 \
    libcurand-11-2 \
    libcurand-dev-11-2 \
    libcusolver-11-2 \
    libcusolver-dev-11-2 \
    cuda-nvrtc-11-2 \
    cuda-nvrtc-dev-11-2 \
    cuda-command-line-tools-11-2 \
    # from sources.list.d/nvidia-ml.list
    libnccl2=${NCCL_VERSION} \
    libnccl-dev=${NCCL_VERSION} \    
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# install Python
RUN apt-get update \
 && apt-get install -y python3 python3-pip

###########################################################################
# Horovod dependencies
###########################################################################

# Install Open MPI
RUN mkdir /tmp/openmpi \
 && cd /tmp/openmpi \
 && wget -q https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \
 && tar zxf openmpi-4.0.1.tar.gz \
 && cd openmpi-4.0.1 \
 && ./configure --enable-orterun-prefix-by-default \
 && make -j $(nproc) all \
 && make install \
 && ldconfig \
 && rm -rf /tmp/openmpi

# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \
 && echo '#!/bin/bash' > /usr/local/bin/mpirun \
 && echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun \
 && chmod a+x /usr/local/bin/mpirun

# Configure OpenMPI to run good defaults:
#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0
RUN echo "hwloc_base_binding_policy = none" >> /usr/local/etc/openmpi-mca-params.conf \
 && echo "rmaps_base_mapping_policy = slot" >> /usr/local/etc/openmpi-mca-params.conf

# Set default NCCL parameters
RUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf

ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV PATH=/usr/local/bin:/usr/local/nvidia/bin:$PATH

WORKDIR /

RUN python3 -m pip install --no-cache --upgrade \
    h5py==2.10.0 \
    onnx==1.8.1 \
    numpy==1.19.1 \
    pandas==1.3.0 \
    Pillow==2.3.1 \
    requests==2.22.0 \
    scikit-learn \
    # disabling DGL until a release is built for cuda 11.0
    # dgl-cu112==0.6.1 \
    scipy==1.7.0 \
    gluonnlp==0.10.0 \
    gluoncv==0.8.0 \
    # Putting a cap in versions number to avoid potential issues with a new major version
    "urllib3>=1.25.10,<1.26.0" \
    # python-dateutil==2.8.0 to satisfy botocore associated with latest awscli
    python-dateutil==2.8.0 \
    tqdm==4.39.0 \
    sagemaker-experiments==0.* \
    # install PyYAML>=5.4,<5.5 to avoid conflict with latest awscli
    "PyYAML>=5.4,<5.5" \
    mpi4py \
    sagemaker-mxnet-training \
    ${MX_URL} \
    smdebug==${SMDEBUG_VERSION} \
    sagemaker \
    awscli \
    smclarify

# Install extra packages
RUN python3 -m pip install --no-cache-dir -U \
    bokeh \
    imageio \
    opencv-python \
    plotly \
    seaborn \
    shap

# Install Horovod, temporarily using CUDA stubs
RUN ldconfig /usr/local/cuda-11.2/targets/x86_64-linux/lib/stubs \
 && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITHOUT_TENSORFLOW=1 \
    HOROVOD_WITHOUT_PYTORCH=1 HOROVOD_WITH_MXNET=1 MAKEFLAGS="-j1" \
    python3 -m pip install --no-cache-dir horovod \
 && ldconfig

# Allow OpenSSH to talk to containers without asking for confirmation
RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \
 && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new \
 && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

# OpenSHH config for MPI communication
RUN mkdir -p /var/run/sshd && \
  sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

RUN rm -rf /root/.ssh/ && \
  mkdir -p /root/.ssh/ && \
  ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \
  cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \
  && printf "Host *\n StrictHostKeyChecking no\n" >> /root/.ssh/config

# This is here to make our installed version of OpenCV work.
# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394
# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?
RUN ln -s /dev/null /dev/raw1394

COPY deep_learning_container.py /usr/local/bin/deep_learning_container.py

RUN chmod +x /usr/local/bin/deep_learning_container.py

RUN HOME_DIR=/root \
 && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
 && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
 && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
 && chmod +x /usr/local/bin/testOSSCompliance \
 && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
 && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} python3 \
 && rm -rf ${HOME_DIR}/oss_compliance*

RUN curl -o /license.txt https://aws-dlc-licenses.s3.amazonaws.com/aws-mx-1.9.0/license.txt

CMD ["/bin/bash"]
