import os
import json

import pytest

from test.test_utils import (
    LOGGER,
)
# Required to prevent circular dependency while importing
from test.test_utils import ecr as ecr_utils
from test.test_utils.security import (
    CVESeverity,
    ECREnhancedScanVulnerabilityList,
)

@pytest.mark.usefixtures("sagemaker")
@pytest.mark.model("N/A")
@pytest.mark.integration("Check if ECR Scan data is read properly")
def test_read_from_ecr_scan():
    with open('./sanity/resources/ecr_scan_result1.json', 'r') as f:
        scan_results = json.load(f)
    minimum_sev_threshold="HIGH"
    ecr_image_vulnerability_list = ECREnhancedScanVulnerabilityList(minimum_severity=CVESeverity[minimum_sev_threshold])
    ecr_image_vulnerability_list.construct_allowlist_from_ecr_scan_result(scan_results)
    with open(f'./sanity/resources/allowlist1.json', 'r') as f:
        expected_result = json.load(f)
    assert expected_result == ecr_image_vulnerability_list.vulnerability_list, "Lists do not match!!"
    assert expected_result == ecr_image_vulnerability_list.get_sorted_vulnerability_list(), "Lists do not match!!"


@pytest.mark.usefixtures("sagemaker")
@pytest.mark.model("N/A")
@pytest.mark.integration("Check if ECR Scan data is read properly")
def test_subtraction_operator():
    minimum_sev_threshold="HIGH"
    with open('./sanity/resources/ecr_scan_result1.json', 'r') as f:
        scan_results = json.load(f)
    ecr_image_vulnerability_list1 = ECREnhancedScanVulnerabilityList(minimum_severity=CVESeverity[minimum_sev_threshold])
    ecr_image_vulnerability_list1.construct_allowlist_from_ecr_scan_result(scan_results)

    with open('./sanity/resources/ecr_scan_result2.json', 'r') as f:
        scan_results = json.load(f)
    ecr_image_vulnerability_list2 = ECREnhancedScanVulnerabilityList(minimum_severity=CVESeverity[minimum_sev_threshold])
    ecr_image_vulnerability_list2.construct_allowlist_from_ecr_scan_result(scan_results)

    vuln_list_one_minus_two = ecr_image_vulnerability_list1 - ecr_image_vulnerability_list2
    vuln_list_two_minus_one = ecr_image_vulnerability_list2 - ecr_image_vulnerability_list1

    with open('./sanity/resources/allowlist_one_minus_two.json', 'r') as f:
        one_minus_two_saved_results = json.load(f)

    with open('./sanity/resources/allowlist_two_minus_one.json', 'r') as f:
        two_minus_one_saved_results = json.load(f)
    
    assert vuln_list_one_minus_two.vulnerability_list == one_minus_two_saved_results, f"{vuln_list_one_minus_two.vulnerability_list} \n does not match \n {one_minus_two_saved_results}"
    assert vuln_list_two_minus_one.vulnerability_list == two_minus_one_saved_results, f"{vuln_list_two_minus_one.vulnerability_list} \n does not match \n {two_minus_one_saved_results}"
    assert (ecr_image_vulnerability_list1 - ecr_image_vulnerability_list1) == None, "Failed"
