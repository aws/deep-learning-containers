import pytest

from test import test_utils
from test.test_utils import ec2 as ec2_utils
from test.test_utils import get_framework_and_version_from_tag


@pytest.mark.model("N/A")
@pytest.mark.processor("gpu")
@pytest.mark.integration("telemetry")
@pytest.mark.parametrize("ec2_instance_type", ["p3.2xlarge"], indirect=True)
def test_telemetry_bad_instance_role_gpu(gpu, ec2_client, ec2_instance, ec2_connection):
    _run_bad_instance_role(gpu, ec2_client, ec2_instance, ec2_connection)


@pytest.mark.model("N/A")
@pytest.mark.processor("cpu")
@pytest.mark.integration("telemetry")
@pytest.mark.parametrize("ec2_instance_type", ["c4.4xlarge"], indirect=True)
def test_telemetry_bad_instance_role_cpu(cpu, ec2_client, ec2_instance, ec2_connection):
    _run_bad_instance_role(cpu, ec2_client, ec2_instance, ec2_connection)


@pytest.mark.model("N/A")
@pytest.mark.processor("neuron")
@pytest.mark.integration("telemetry")
@pytest.mark.parametrize("ec2_instance_type", ["inf1.xlarge"], indirect=True)
def test_telemetry_bad_instance_role_neuron(neuron, ec2_client, ec2_instance, ec2_connection):
    _run_bad_instance_role(neuron, ec2_client, ec2_instance, ec2_connection)


@pytest.mark.model("N/A")
@pytest.mark.processor("gpu")
@pytest.mark.integration("telemetry")
@pytest.mark.parametrize("ec2_instance_type", ["p3.2xlarge"], indirect=True)
def test_telemetry_instance_tag_success_gpu(gpu, ec2_client, ec2_instance, ec2_connection):
    _run_tag_success(gpu, ec2_client, ec2_instance, ec2_connection)


@pytest.mark.model("N/A")
@pytest.mark.processor("cpu")
@pytest.mark.integration("telemetry")
@pytest.mark.parametrize("ec2_instance_type", ["c4.4xlarge"], indirect=True)
def test_telemetry_instance_tag_success_cpu(cpu, ec2_client, ec2_instance, ec2_connection):
    _run_tag_success(cpu, ec2_client, ec2_instance, ec2_connection)


@pytest.mark.model("N/A")
@pytest.mark.processor("neuron")
@pytest.mark.integration("telemetry")
@pytest.mark.parametrize("ec2_instance_type", ["inf1.xlarge"], indirect=True)
def test_telemetry_instance_tag_success_neuron(neuron, ec2_client, ec2_instance, ec2_connection):
    _run_tag_success(neuron, ec2_client, ec2_instance, ec2_connection)


def _run_bad_instance_role(image_uri, ec2_client, ec2_instance, ec2_connection):
    ec2_instance_id, _ = ec2_instance
    repo_name, image_tag = test_utils.get_repository_and_tag_from_image_uri(image_uri)
    framework, _ = get_framework_and_version_from_tag(image_uri)
    processor = test_utils.get_processor_from_image_uri(image_uri)

    container_name = f"{repo_name}-telemetry_bad_instance_role-ec2"

    docker_cmd = "nvidia-docker" if processor == "gpu" else "docker"

    ec2_connection.run(f"{docker_cmd} pull {image_uri}")
    ec2_connection.run(f"{docker_cmd} run --name {container_name} -itd {image_uri} bash", hide=True)

    profile_associations = ec2_client.describe_iam_instance_profile_associations(
        Filters=[{"Name": "instance-id", "Values": [ec2_instance_id]}]
    )
    association_ids = [
        association["AssociationId"] for association in profile_associations.get("IamInstanceProfileAssociations")
    ]
    for a_id in association_ids:
        ec2_client.disassociate_iam_instance_profile(AssociationId=a_id)

    output = ec2_connection.run(
        f"{docker_cmd} exec -it {container_name} python -c 'import {framework}' ",
        warn=True
    )
    assert output.ok, f"'import {framework}' fails when credentials not configured"


def _run_tag_success(image_uri, ec2_client, ec2_instance, ec2_connection):
    expected_tag_key = "aws-dlc-autogenerated-tag-do-not-delete"

    ec2_instance_id, _ = ec2_instance
    repo_name, image_tag = test_utils.get_repository_and_tag_from_image_uri(image_uri)
    framework, _ = get_framework_and_version_from_tag(image_uri)
    processor = test_utils.get_processor_from_image_uri(image_uri)

    container_name = f"{repo_name}-telemetry_tag_instance_success-ec2"

    docker_cmd = "nvidia-docker" if processor == "gpu" else "docker"

    ec2_connection.run(f"{docker_cmd} pull {image_uri}")
    ec2_connection.run(f"{docker_cmd} run --name {container_name} -itd {image_uri} bash", hide=True)

    preexisting_ec2_instance_tags = ec2_utils.get_ec2_instance_tags(ec2_instance_id, ec2_client=ec2_client)
    if expected_tag_key in preexisting_ec2_instance_tags:
        ec2_client.remove_tags(Resources=[ec2_instance_id], Tags=[{"Key": expected_tag_key}])

    ec2_connection.run(f"{docker_cmd} exec -it {container_name} python -c 'import {framework}' ", warn=True)
    ec2_instance_tags = ec2_utils.get_ec2_instance_tags(ec2_instance_id, ec2_client=ec2_client)
    assert expected_tag_key in ec2_instance_tags, f"{expected_tag_key} was not applied as an instance tag"
